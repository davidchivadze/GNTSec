/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.8.2.0 (NJsonSchema v10.2.1.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export module Api {
export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

export interface IAuthService {
    /**
     * @return OK
     */
    login(username: string, password: string): Observable<IResponseOfString>;
    /**
     * @return OK
     */
    getSerialKey(): Observable<IResponseOfString>;
    /**
     * @return OK
     */
    updateSerialKey(key: string): Observable<IResponseOfBoolean>;
}

@Injectable({
    providedIn: 'root'
})
export class AuthService implements IAuthService {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:44376";
    }

    /**
     * @return OK
     */
    login(username: string, password: string): Observable<IResponseOfString> {
        let url_ = this.baseUrl + "/api/Auth/Login?";
        if (username === undefined || username === null)
            throw new Error("The parameter 'username' must be defined and cannot be null.");
        else
            url_ += "username=" + encodeURIComponent("" + username) + "&";
        if (password === undefined || password === null)
            throw new Error("The parameter 'password' must be defined and cannot be null.");
        else
            url_ += "password=" + encodeURIComponent("" + password) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processLogin(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processLogin(<any>response_);
                } catch (e) {
                    return <Observable<IResponseOfString>><any>_observableThrow(e);
                }
            } else
                return <Observable<IResponseOfString>><any>_observableThrow(response_);
        }));
    }

    protected processLogin(response: HttpResponseBase): Observable<IResponseOfString> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = IResponseOfString.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<IResponseOfString>(<any>null);
    }

    /**
     * @return OK
     */
    getSerialKey(): Observable<IResponseOfString> {
        let url_ = this.baseUrl + "/api/Auth/GetSerialKey";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetSerialKey(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetSerialKey(<any>response_);
                } catch (e) {
                    return <Observable<IResponseOfString>><any>_observableThrow(e);
                }
            } else
                return <Observable<IResponseOfString>><any>_observableThrow(response_);
        }));
    }

    protected processGetSerialKey(response: HttpResponseBase): Observable<IResponseOfString> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = IResponseOfString.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<IResponseOfString>(<any>null);
    }

    /**
     * @return OK
     */
    updateSerialKey(key: string): Observable<IResponseOfBoolean> {
        let url_ = this.baseUrl + "/api/Auth/UpdateSerialKey?";
        if (key === undefined || key === null)
            throw new Error("The parameter 'key' must be defined and cannot be null.");
        else
            url_ += "key=" + encodeURIComponent("" + key) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateSerialKey(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateSerialKey(<any>response_);
                } catch (e) {
                    return <Observable<IResponseOfBoolean>><any>_observableThrow(e);
                }
            } else
                return <Observable<IResponseOfBoolean>><any>_observableThrow(response_);
        }));
    }

    protected processUpdateSerialKey(response: HttpResponseBase): Observable<IResponseOfBoolean> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = IResponseOfBoolean.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<IResponseOfBoolean>(<any>null);
    }
}

export interface IEmployeeService {
    /**
     * @return OK
     */
    addEmployee(request: AddEmployeeRequestModel): Observable<IResponseOfAddEmployeeResposeModel>;
    /**
     * @return OK
     */
    editEmployee(request: GetEmployeeForEdit): Observable<IResponseOfEditEmployeeResposeModel>;
    /**
     * @return OK
     */
    deleteEmployees(employeeIDs: number[]): Observable<IResponseOfBoolean>;
    /**
     * @return OK
     */
    getEmployeeForEdit(employeeID: number): Observable<IResponseOfGetEmployeeForEdit>;
    /**
     * @return OK
     */
    deleteEmployee(employeeID: number): Observable<IResponseOfBoolean>;
    /**
     * @param model_employeeID (optional) 
     * @return OK
     */
    getEmployeeHolidayList(model_employeeID: number | null | undefined): Observable<IResponseOfGetEmployeeHolidayListResponse>;
    /**
     * @return OK
     */
    getEmployeeList(): Observable<IResponseOfGetEmployeeListResponse>;
    /**
     * @return OK
     */
    addGovernmentHoliday(model: AddGovernmentRequest): Observable<IResponseOfAddGovernmentResponse>;
    /**
     * @return OK
     */
    getGovernmentHolidayList(): Observable<IResponseOfGetGovernmentHolidayListResponse>;
    /**
     * @return OK
     */
    editGovernmentHoliday(model: EditGovernmentHolidayRequest): Observable<IResponseOfEditGovernmentHolidayResponse>;
    /**
     * @return OK
     */
    deleteGovernmentHoliday(governmentHolidayID: number): Observable<IResponseOfBoolean>;
    /**
     * @return OK
     */
    getEmployeeHolidayRequestList(employeeID: number): Observable<IResponseOfGetEmployeeHolidayReqListResponse>;
    /**
     * @return OK
     */
    addEmployteeHolidayRequest(model: AddEmployeeHolidayReqRequest): Observable<IResponseOfAddEmployeeHolidayReqResponse>;
    /**
     * @return OK
     */
    editHolidayRequest(model: EditEmployeeHolidayReqRequest): Observable<IResponseOfEditEmployeeHolidayReqResponse>;
    /**
     * @return OK
     */
    getEmployeeModReport(month: number, year: number, employeeID: number, branchID: number): Observable<IResponseOfListOfGetEmployeeModReportResponse>;
    /**
     * @return OK
     */
    getEmployeeFullReport(month: number, year: number, employeeID: number, branchID: number): Observable<IResponseOfGetEmployeeFullReportResponse>;
    /**
     * @return OK
     */
    getEmployeeFullReportWeekHoures(fromDate: Date, toDate: Date, employeeID: number, branchID: number): Observable<IResponseOfGetEmployeeFullReportResponse>;
    /**
     * @return OK
     */
    deleteEmployeeHolidayRequest(holidayID: number): Observable<IResponseOfBoolean>;
}

@Injectable({
    providedIn: 'root'
})
export class EmployeeService implements IEmployeeService {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:44376";
    }

    /**
     * @return OK
     */
    addEmployee(request: AddEmployeeRequestModel): Observable<IResponseOfAddEmployeeResposeModel> {
        let url_ = this.baseUrl + "/api/Employee/AddEmployee";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAddEmployee(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAddEmployee(<any>response_);
                } catch (e) {
                    return <Observable<IResponseOfAddEmployeeResposeModel>><any>_observableThrow(e);
                }
            } else
                return <Observable<IResponseOfAddEmployeeResposeModel>><any>_observableThrow(response_);
        }));
    }

    protected processAddEmployee(response: HttpResponseBase): Observable<IResponseOfAddEmployeeResposeModel> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = IResponseOfAddEmployeeResposeModel.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<IResponseOfAddEmployeeResposeModel>(<any>null);
    }

    /**
     * @return OK
     */
    editEmployee(request: GetEmployeeForEdit): Observable<IResponseOfEditEmployeeResposeModel> {
        let url_ = this.baseUrl + "/api/Employee/EditEmployee";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processEditEmployee(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processEditEmployee(<any>response_);
                } catch (e) {
                    return <Observable<IResponseOfEditEmployeeResposeModel>><any>_observableThrow(e);
                }
            } else
                return <Observable<IResponseOfEditEmployeeResposeModel>><any>_observableThrow(response_);
        }));
    }

    protected processEditEmployee(response: HttpResponseBase): Observable<IResponseOfEditEmployeeResposeModel> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = IResponseOfEditEmployeeResposeModel.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<IResponseOfEditEmployeeResposeModel>(<any>null);
    }

    /**
     * @return OK
     */
    deleteEmployees(employeeIDs: number[]): Observable<IResponseOfBoolean> {
        let url_ = this.baseUrl + "/api/Employee/DeleteEmployees";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(employeeIDs);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteEmployees(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteEmployees(<any>response_);
                } catch (e) {
                    return <Observable<IResponseOfBoolean>><any>_observableThrow(e);
                }
            } else
                return <Observable<IResponseOfBoolean>><any>_observableThrow(response_);
        }));
    }

    protected processDeleteEmployees(response: HttpResponseBase): Observable<IResponseOfBoolean> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = IResponseOfBoolean.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<IResponseOfBoolean>(<any>null);
    }

    /**
     * @return OK
     */
    getEmployeeForEdit(employeeID: number): Observable<IResponseOfGetEmployeeForEdit> {
        let url_ = this.baseUrl + "/api/Employee/GetEmployeeForEdit?";
        if (employeeID === undefined || employeeID === null)
            throw new Error("The parameter 'employeeID' must be defined and cannot be null.");
        else
            url_ += "EmployeeID=" + encodeURIComponent("" + employeeID) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetEmployeeForEdit(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetEmployeeForEdit(<any>response_);
                } catch (e) {
                    return <Observable<IResponseOfGetEmployeeForEdit>><any>_observableThrow(e);
                }
            } else
                return <Observable<IResponseOfGetEmployeeForEdit>><any>_observableThrow(response_);
        }));
    }

    protected processGetEmployeeForEdit(response: HttpResponseBase): Observable<IResponseOfGetEmployeeForEdit> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = IResponseOfGetEmployeeForEdit.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<IResponseOfGetEmployeeForEdit>(<any>null);
    }

    /**
     * @return OK
     */
    deleteEmployee(employeeID: number): Observable<IResponseOfBoolean> {
        let url_ = this.baseUrl + "/api/Employee/DeleteEmployee?";
        if (employeeID === undefined || employeeID === null)
            throw new Error("The parameter 'employeeID' must be defined and cannot be null.");
        else
            url_ += "employeeID=" + encodeURIComponent("" + employeeID) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteEmployee(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteEmployee(<any>response_);
                } catch (e) {
                    return <Observable<IResponseOfBoolean>><any>_observableThrow(e);
                }
            } else
                return <Observable<IResponseOfBoolean>><any>_observableThrow(response_);
        }));
    }

    protected processDeleteEmployee(response: HttpResponseBase): Observable<IResponseOfBoolean> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = IResponseOfBoolean.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<IResponseOfBoolean>(<any>null);
    }

    /**
     * @param model_employeeID (optional) 
     * @return OK
     */
    getEmployeeHolidayList(model_employeeID: number | null | undefined): Observable<IResponseOfGetEmployeeHolidayListResponse> {
        let url_ = this.baseUrl + "/api/Employee/GetEmployeeHolidayList?";
        if (model_employeeID !== undefined && model_employeeID !== null)
            url_ += "model.employeeID=" + encodeURIComponent("" + model_employeeID) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetEmployeeHolidayList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetEmployeeHolidayList(<any>response_);
                } catch (e) {
                    return <Observable<IResponseOfGetEmployeeHolidayListResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<IResponseOfGetEmployeeHolidayListResponse>><any>_observableThrow(response_);
        }));
    }

    protected processGetEmployeeHolidayList(response: HttpResponseBase): Observable<IResponseOfGetEmployeeHolidayListResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = IResponseOfGetEmployeeHolidayListResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<IResponseOfGetEmployeeHolidayListResponse>(<any>null);
    }

    /**
     * @return OK
     */
    getEmployeeList(): Observable<IResponseOfGetEmployeeListResponse> {
        let url_ = this.baseUrl + "/api/Employee/GetEmployeeList";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetEmployeeList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetEmployeeList(<any>response_);
                } catch (e) {
                    return <Observable<IResponseOfGetEmployeeListResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<IResponseOfGetEmployeeListResponse>><any>_observableThrow(response_);
        }));
    }

    protected processGetEmployeeList(response: HttpResponseBase): Observable<IResponseOfGetEmployeeListResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = IResponseOfGetEmployeeListResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<IResponseOfGetEmployeeListResponse>(<any>null);
    }

    /**
     * @return OK
     */
    addGovernmentHoliday(model: AddGovernmentRequest): Observable<IResponseOfAddGovernmentResponse> {
        let url_ = this.baseUrl + "/api/Employee/AddGovernmentHoliday";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAddGovernmentHoliday(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAddGovernmentHoliday(<any>response_);
                } catch (e) {
                    return <Observable<IResponseOfAddGovernmentResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<IResponseOfAddGovernmentResponse>><any>_observableThrow(response_);
        }));
    }

    protected processAddGovernmentHoliday(response: HttpResponseBase): Observable<IResponseOfAddGovernmentResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = IResponseOfAddGovernmentResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<IResponseOfAddGovernmentResponse>(<any>null);
    }

    /**
     * @return OK
     */
    getGovernmentHolidayList(): Observable<IResponseOfGetGovernmentHolidayListResponse> {
        let url_ = this.baseUrl + "/api/Employee/GetGovernmentHolidayList";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetGovernmentHolidayList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetGovernmentHolidayList(<any>response_);
                } catch (e) {
                    return <Observable<IResponseOfGetGovernmentHolidayListResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<IResponseOfGetGovernmentHolidayListResponse>><any>_observableThrow(response_);
        }));
    }

    protected processGetGovernmentHolidayList(response: HttpResponseBase): Observable<IResponseOfGetGovernmentHolidayListResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = IResponseOfGetGovernmentHolidayListResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<IResponseOfGetGovernmentHolidayListResponse>(<any>null);
    }

    /**
     * @return OK
     */
    editGovernmentHoliday(model: EditGovernmentHolidayRequest): Observable<IResponseOfEditGovernmentHolidayResponse> {
        let url_ = this.baseUrl + "/api/Employee/EditGovernmentHoliday";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processEditGovernmentHoliday(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processEditGovernmentHoliday(<any>response_);
                } catch (e) {
                    return <Observable<IResponseOfEditGovernmentHolidayResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<IResponseOfEditGovernmentHolidayResponse>><any>_observableThrow(response_);
        }));
    }

    protected processEditGovernmentHoliday(response: HttpResponseBase): Observable<IResponseOfEditGovernmentHolidayResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = IResponseOfEditGovernmentHolidayResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<IResponseOfEditGovernmentHolidayResponse>(<any>null);
    }

    /**
     * @return OK
     */
    deleteGovernmentHoliday(governmentHolidayID: number): Observable<IResponseOfBoolean> {
        let url_ = this.baseUrl + "/api/Employee/DeleteGovernmentHoliday?";
        if (governmentHolidayID === undefined || governmentHolidayID === null)
            throw new Error("The parameter 'governmentHolidayID' must be defined and cannot be null.");
        else
            url_ += "governmentHolidayID=" + encodeURIComponent("" + governmentHolidayID) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteGovernmentHoliday(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteGovernmentHoliday(<any>response_);
                } catch (e) {
                    return <Observable<IResponseOfBoolean>><any>_observableThrow(e);
                }
            } else
                return <Observable<IResponseOfBoolean>><any>_observableThrow(response_);
        }));
    }

    protected processDeleteGovernmentHoliday(response: HttpResponseBase): Observable<IResponseOfBoolean> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = IResponseOfBoolean.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<IResponseOfBoolean>(<any>null);
    }

    /**
     * @return OK
     */
    getEmployeeHolidayRequestList(employeeID: number): Observable<IResponseOfGetEmployeeHolidayReqListResponse> {
        let url_ = this.baseUrl + "/api/Employee/GetEmployeeHolidayRequestList?";
        if (employeeID === undefined || employeeID === null)
            throw new Error("The parameter 'employeeID' must be defined and cannot be null.");
        else
            url_ += "EmployeeID=" + encodeURIComponent("" + employeeID) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetEmployeeHolidayRequestList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetEmployeeHolidayRequestList(<any>response_);
                } catch (e) {
                    return <Observable<IResponseOfGetEmployeeHolidayReqListResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<IResponseOfGetEmployeeHolidayReqListResponse>><any>_observableThrow(response_);
        }));
    }

    protected processGetEmployeeHolidayRequestList(response: HttpResponseBase): Observable<IResponseOfGetEmployeeHolidayReqListResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = IResponseOfGetEmployeeHolidayReqListResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<IResponseOfGetEmployeeHolidayReqListResponse>(<any>null);
    }

    /**
     * @return OK
     */
    addEmployteeHolidayRequest(model: AddEmployeeHolidayReqRequest): Observable<IResponseOfAddEmployeeHolidayReqResponse> {
        let url_ = this.baseUrl + "/api/Employee/AddEmployteeHolidayRequest";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAddEmployteeHolidayRequest(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAddEmployteeHolidayRequest(<any>response_);
                } catch (e) {
                    return <Observable<IResponseOfAddEmployeeHolidayReqResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<IResponseOfAddEmployeeHolidayReqResponse>><any>_observableThrow(response_);
        }));
    }

    protected processAddEmployteeHolidayRequest(response: HttpResponseBase): Observable<IResponseOfAddEmployeeHolidayReqResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = IResponseOfAddEmployeeHolidayReqResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<IResponseOfAddEmployeeHolidayReqResponse>(<any>null);
    }

    /**
     * @return OK
     */
    editHolidayRequest(model: EditEmployeeHolidayReqRequest): Observable<IResponseOfEditEmployeeHolidayReqResponse> {
        let url_ = this.baseUrl + "/api/Employee/EditHolidayRequest";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processEditHolidayRequest(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processEditHolidayRequest(<any>response_);
                } catch (e) {
                    return <Observable<IResponseOfEditEmployeeHolidayReqResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<IResponseOfEditEmployeeHolidayReqResponse>><any>_observableThrow(response_);
        }));
    }

    protected processEditHolidayRequest(response: HttpResponseBase): Observable<IResponseOfEditEmployeeHolidayReqResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = IResponseOfEditEmployeeHolidayReqResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<IResponseOfEditEmployeeHolidayReqResponse>(<any>null);
    }

    /**
     * @return OK
     */
    getEmployeeModReport(month: number, year: number, employeeID: number, branchID: number): Observable<IResponseOfListOfGetEmployeeModReportResponse> {
        let url_ = this.baseUrl + "/api/Employee/GetEmployeeModReport?";
        if (month === undefined || month === null)
            throw new Error("The parameter 'month' must be defined and cannot be null.");
        else
            url_ += "month=" + encodeURIComponent("" + month) + "&";
        if (year === undefined || year === null)
            throw new Error("The parameter 'year' must be defined and cannot be null.");
        else
            url_ += "year=" + encodeURIComponent("" + year) + "&";
        if (employeeID === undefined || employeeID === null)
            throw new Error("The parameter 'employeeID' must be defined and cannot be null.");
        else
            url_ += "EmployeeID=" + encodeURIComponent("" + employeeID) + "&";
        if (branchID === undefined || branchID === null)
            throw new Error("The parameter 'branchID' must be defined and cannot be null.");
        else
            url_ += "branchID=" + encodeURIComponent("" + branchID) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetEmployeeModReport(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetEmployeeModReport(<any>response_);
                } catch (e) {
                    return <Observable<IResponseOfListOfGetEmployeeModReportResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<IResponseOfListOfGetEmployeeModReportResponse>><any>_observableThrow(response_);
        }));
    }

    protected processGetEmployeeModReport(response: HttpResponseBase): Observable<IResponseOfListOfGetEmployeeModReportResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = IResponseOfListOfGetEmployeeModReportResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<IResponseOfListOfGetEmployeeModReportResponse>(<any>null);
    }

    /**
     * @return OK
     */
    getEmployeeFullReport(month: number, year: number, employeeID: number, branchID: number): Observable<IResponseOfGetEmployeeFullReportResponse> {
        let url_ = this.baseUrl + "/api/Employee/GetEmployeeFullReport?";
        if (month === undefined || month === null)
            throw new Error("The parameter 'month' must be defined and cannot be null.");
        else
            url_ += "month=" + encodeURIComponent("" + month) + "&";
        if (year === undefined || year === null)
            throw new Error("The parameter 'year' must be defined and cannot be null.");
        else
            url_ += "year=" + encodeURIComponent("" + year) + "&";
        if (employeeID === undefined || employeeID === null)
            throw new Error("The parameter 'employeeID' must be defined and cannot be null.");
        else
            url_ += "EmployeeID=" + encodeURIComponent("" + employeeID) + "&";
        if (branchID === undefined || branchID === null)
            throw new Error("The parameter 'branchID' must be defined and cannot be null.");
        else
            url_ += "BranchID=" + encodeURIComponent("" + branchID) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetEmployeeFullReport(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetEmployeeFullReport(<any>response_);
                } catch (e) {
                    return <Observable<IResponseOfGetEmployeeFullReportResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<IResponseOfGetEmployeeFullReportResponse>><any>_observableThrow(response_);
        }));
    }

    protected processGetEmployeeFullReport(response: HttpResponseBase): Observable<IResponseOfGetEmployeeFullReportResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = IResponseOfGetEmployeeFullReportResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<IResponseOfGetEmployeeFullReportResponse>(<any>null);
    }

    /**
     * @return OK
     */
    getEmployeeFullReportWeekHoures(fromDate: Date, toDate: Date, employeeID: number, branchID: number): Observable<IResponseOfGetEmployeeFullReportResponse> {
        let url_ = this.baseUrl + "/api/Employee/GetEmployeeFullReportWeekHoures?";
        if (fromDate === undefined || fromDate === null)
            throw new Error("The parameter 'fromDate' must be defined and cannot be null.");
        else
            url_ += "FromDate=" + encodeURIComponent(fromDate ? "" + fromDate.toJSON() : "") + "&";
        if (toDate === undefined || toDate === null)
            throw new Error("The parameter 'toDate' must be defined and cannot be null.");
        else
            url_ += "ToDate=" + encodeURIComponent(toDate ? "" + toDate.toJSON() : "") + "&";
        if (employeeID === undefined || employeeID === null)
            throw new Error("The parameter 'employeeID' must be defined and cannot be null.");
        else
            url_ += "EmployeeID=" + encodeURIComponent("" + employeeID) + "&";
        if (branchID === undefined || branchID === null)
            throw new Error("The parameter 'branchID' must be defined and cannot be null.");
        else
            url_ += "BranchID=" + encodeURIComponent("" + branchID) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetEmployeeFullReportWeekHoures(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetEmployeeFullReportWeekHoures(<any>response_);
                } catch (e) {
                    return <Observable<IResponseOfGetEmployeeFullReportResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<IResponseOfGetEmployeeFullReportResponse>><any>_observableThrow(response_);
        }));
    }

    protected processGetEmployeeFullReportWeekHoures(response: HttpResponseBase): Observable<IResponseOfGetEmployeeFullReportResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = IResponseOfGetEmployeeFullReportResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<IResponseOfGetEmployeeFullReportResponse>(<any>null);
    }

    /**
     * @return OK
     */
    deleteEmployeeHolidayRequest(holidayID: number): Observable<IResponseOfBoolean> {
        let url_ = this.baseUrl + "/api/Employee/DeleteEmployeeHolidayRequest?";
        if (holidayID === undefined || holidayID === null)
            throw new Error("The parameter 'holidayID' must be defined and cannot be null.");
        else
            url_ += "holidayID=" + encodeURIComponent("" + holidayID) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteEmployeeHolidayRequest(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteEmployeeHolidayRequest(<any>response_);
                } catch (e) {
                    return <Observable<IResponseOfBoolean>><any>_observableThrow(e);
                }
            } else
                return <Observable<IResponseOfBoolean>><any>_observableThrow(response_);
        }));
    }

    protected processDeleteEmployeeHolidayRequest(response: HttpResponseBase): Observable<IResponseOfBoolean> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = IResponseOfBoolean.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<IResponseOfBoolean>(<any>null);
    }
}

export interface IParametersService {
    /**
     * @return OK
     */
    getGenderList(): Observable<IResponseOfGetGenderListResponse>;
    /**
     * @return OK
     */
    getDepartmentsList(): Observable<IResponseOfGetDepartmentsListResponse>;
    /**
     * @return OK
     */
    addDepartment(model: AddDepartmentRequest): Observable<IResponseOfAddDepartmentResponse>;
    /**
     * @return OK
     */
    editDepartment(model: EditDepartmentRequest): Observable<IResponseOfEditDeparmentResponse>;
    /**
     * @return OK
     */
    getBranchList(): Observable<IResponseOfGetBranchListResponse>;
    /**
     * @return OK
     */
    getBranchForEdit(id: number): Observable<IResponseOfGetBranchListItem>;
    /**
     * @return OK
     */
    deleteBranch(branchID: number): Observable<IResponseOfBoolean>;
    /**
     * @return OK
     */
    deleteDepartment(departmentID: number): Observable<IResponseOfBoolean>;
    /**
     * @return OK
     */
    deleteDevice(deviceID: number): Observable<IResponseOfBoolean>;
    /**
     * @return OK
     */
    getScheduleGenerators(): Observable<IResponseOfGetScheduleGeneratorResponse>;
    /**
     * @return OK
     */
    editScheduleGenerator(model: GetScheduleGeneratorItems): Observable<IResponseOfBoolean>;
    /**
     * @return OK
     */
    addScheduleGenerator(model: AddScheduleGenerator): Observable<IResponseOfBoolean>;
    /**
     * @return OK
     */
    deleteEmployeePosition(employeePositionID: number): Observable<IResponseOfBoolean>;
    /**
     * @return OK
     */
    getSalaryGenerators(): Observable<IResponseOfListOfSalaryGeneratorModel>;
    /**
     * @return OK
     */
    editSalaryGenerators(model: SalaryGeneratorModel): Observable<IResponseOfBoolean>;
    /**
     * @return OK
     */
    addSalaryGenerator(model: SalaryGeneratorModel): Observable<IResponseOfBoolean>;
    /**
     * @return OK
     */
    addBranch(model: AddBranchRequest): Observable<IResponseOfAddBranchResponse>;
    /**
     * @return OK
     */
    editBranch(model: EditBranchRequest): Observable<IResponseOfEditBranchResponse>;
    /**
     * @return OK
     */
    getEmployeePositionsList(): Observable<IResponseOfGetEmployeePositionsResponse>;
    /**
     * @return OK
     */
    addEmployeePositionType(model: AddEmployeePositionRequest): Observable<IResponseOfAddEmployeePositionResponse>;
    /**
     * @return OK
     */
    editEmployeePosition(model: EditEmployeePositionRequest): Observable<IResponseOfEditEmployeePositionResponse>;
    /**
     * @return OK
     */
    getSalaryTypesList(): Observable<IResponseOfGetSalaryTypeListResponse>;
    /**
     * @return OK
     */
    addSalaryType(model: AddSalaryTypeRequest): Observable<IResponseOfAddSalaryTypeResponse>;
    /**
     * @return OK
     */
    editSalaryType(model: EditSalaryTypeRequest): Observable<IResponseOfEditSalaryTypeResponse>;
    /**
     * @return OK
     */
    getFineTypesLIst(): Observable<IResponseOfGetFineTypeListResponse>;
    /**
     * @return OK
     */
    addFineType(model: AddFineTypeRequest): Observable<IResponseOfAddFineTypeResponse>;
    /**
     * @return OK
     */
    editFineType(model: EditFineTypeRequest): Observable<IResponseOfEditFineTypeResponse>;
    /**
     * @return OK
     */
    getForgivenessTypesLIst(): Observable<IResponseOfGetForgivenessTypeListResponse>;
    /**
     * @return OK
     */
    getCountryList(): Observable<IResponseOfGetCountryListResponse>;
    /**
     * @return OK
     */
    getCitiesListByCountryID(countryID: number): Observable<IResponseOfGetCitiesListByCountryIDResponse>;
    /**
     * @return OK
     */
    getDeviceTypeList(): Observable<IResponseOfGetDeviceTypeListResponse>;
    /**
     * @return OK
     */
    getDeviceLocationInBranchList(): Observable<IResponseOfGetDeviceLocationInBranchListResponse>;
    /**
     * @return OK
     */
    addDeviceLocationInBranch(model: AddDeviceLocationInBranchRequest): Observable<IResponseOfAddDeviceLocationInBranchResponse>;
    /**
     * @return OK
     */
    editDeviceLocationInBranch(model: EditDeviceLocationInBranchRequest): Observable<IResponseOfEditDeviceLocationInBranchResponse>;
    /**
     * @return OK
     */
    addForgivenessType(model: AddForgivenessTypeRequest): Observable<IResponseOfAddForgivenessTypeResponse>;
    /**
     * @return OK
     */
    editForgivenessType(model: EditForgivenessTypeRequest): Observable<IResponseOfEditForgivenessTypeResponse>;
    /**
     * @return OK
     */
    getHolidayTypeList(): Observable<IResponseOfGetHolidayTypesListResponse>;
}

@Injectable({
    providedIn: 'root'
})
export class ParametersService implements IParametersService {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:44376";
    }

    /**
     * @return OK
     */
    getGenderList(): Observable<IResponseOfGetGenderListResponse> {
        let url_ = this.baseUrl + "/api/Parameters/GetGenderList";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetGenderList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetGenderList(<any>response_);
                } catch (e) {
                    return <Observable<IResponseOfGetGenderListResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<IResponseOfGetGenderListResponse>><any>_observableThrow(response_);
        }));
    }

    protected processGetGenderList(response: HttpResponseBase): Observable<IResponseOfGetGenderListResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = IResponseOfGetGenderListResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<IResponseOfGetGenderListResponse>(<any>null);
    }

    /**
     * @return OK
     */
    getDepartmentsList(): Observable<IResponseOfGetDepartmentsListResponse> {
        let url_ = this.baseUrl + "/api/Parameters/GetDepartmentsList";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetDepartmentsList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetDepartmentsList(<any>response_);
                } catch (e) {
                    return <Observable<IResponseOfGetDepartmentsListResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<IResponseOfGetDepartmentsListResponse>><any>_observableThrow(response_);
        }));
    }

    protected processGetDepartmentsList(response: HttpResponseBase): Observable<IResponseOfGetDepartmentsListResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = IResponseOfGetDepartmentsListResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<IResponseOfGetDepartmentsListResponse>(<any>null);
    }

    /**
     * @return OK
     */
    addDepartment(model: AddDepartmentRequest): Observable<IResponseOfAddDepartmentResponse> {
        let url_ = this.baseUrl + "/api/Parameters/AddDepartment";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAddDepartment(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAddDepartment(<any>response_);
                } catch (e) {
                    return <Observable<IResponseOfAddDepartmentResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<IResponseOfAddDepartmentResponse>><any>_observableThrow(response_);
        }));
    }

    protected processAddDepartment(response: HttpResponseBase): Observable<IResponseOfAddDepartmentResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = IResponseOfAddDepartmentResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<IResponseOfAddDepartmentResponse>(<any>null);
    }

    /**
     * @return OK
     */
    editDepartment(model: EditDepartmentRequest): Observable<IResponseOfEditDeparmentResponse> {
        let url_ = this.baseUrl + "/api/Parameters/EditDepartment";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processEditDepartment(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processEditDepartment(<any>response_);
                } catch (e) {
                    return <Observable<IResponseOfEditDeparmentResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<IResponseOfEditDeparmentResponse>><any>_observableThrow(response_);
        }));
    }

    protected processEditDepartment(response: HttpResponseBase): Observable<IResponseOfEditDeparmentResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = IResponseOfEditDeparmentResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<IResponseOfEditDeparmentResponse>(<any>null);
    }

    /**
     * @return OK
     */
    getBranchList(): Observable<IResponseOfGetBranchListResponse> {
        let url_ = this.baseUrl + "/api/Parameters/GetBranchList";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetBranchList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetBranchList(<any>response_);
                } catch (e) {
                    return <Observable<IResponseOfGetBranchListResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<IResponseOfGetBranchListResponse>><any>_observableThrow(response_);
        }));
    }

    protected processGetBranchList(response: HttpResponseBase): Observable<IResponseOfGetBranchListResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = IResponseOfGetBranchListResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<IResponseOfGetBranchListResponse>(<any>null);
    }

    /**
     * @return OK
     */
    getBranchForEdit(id: number): Observable<IResponseOfGetBranchListItem> {
        let url_ = this.baseUrl + "/api/Parameters/GetBranchForEdit/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetBranchForEdit(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetBranchForEdit(<any>response_);
                } catch (e) {
                    return <Observable<IResponseOfGetBranchListItem>><any>_observableThrow(e);
                }
            } else
                return <Observable<IResponseOfGetBranchListItem>><any>_observableThrow(response_);
        }));
    }

    protected processGetBranchForEdit(response: HttpResponseBase): Observable<IResponseOfGetBranchListItem> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = IResponseOfGetBranchListItem.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<IResponseOfGetBranchListItem>(<any>null);
    }

    /**
     * @return OK
     */
    deleteBranch(branchID: number): Observable<IResponseOfBoolean> {
        let url_ = this.baseUrl + "/api/Parameters/DeleteBranch?";
        if (branchID === undefined || branchID === null)
            throw new Error("The parameter 'branchID' must be defined and cannot be null.");
        else
            url_ += "branchID=" + encodeURIComponent("" + branchID) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteBranch(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteBranch(<any>response_);
                } catch (e) {
                    return <Observable<IResponseOfBoolean>><any>_observableThrow(e);
                }
            } else
                return <Observable<IResponseOfBoolean>><any>_observableThrow(response_);
        }));
    }

    protected processDeleteBranch(response: HttpResponseBase): Observable<IResponseOfBoolean> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = IResponseOfBoolean.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<IResponseOfBoolean>(<any>null);
    }

    /**
     * @return OK
     */
    deleteDepartment(departmentID: number): Observable<IResponseOfBoolean> {
        let url_ = this.baseUrl + "/api/Parameters/DeleteDepartment?";
        if (departmentID === undefined || departmentID === null)
            throw new Error("The parameter 'departmentID' must be defined and cannot be null.");
        else
            url_ += "departmentID=" + encodeURIComponent("" + departmentID) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteDepartment(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteDepartment(<any>response_);
                } catch (e) {
                    return <Observable<IResponseOfBoolean>><any>_observableThrow(e);
                }
            } else
                return <Observable<IResponseOfBoolean>><any>_observableThrow(response_);
        }));
    }

    protected processDeleteDepartment(response: HttpResponseBase): Observable<IResponseOfBoolean> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = IResponseOfBoolean.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<IResponseOfBoolean>(<any>null);
    }

    /**
     * @return OK
     */
    deleteDevice(deviceID: number): Observable<IResponseOfBoolean> {
        let url_ = this.baseUrl + "/api/Parameters/DeleteDevice?";
        if (deviceID === undefined || deviceID === null)
            throw new Error("The parameter 'deviceID' must be defined and cannot be null.");
        else
            url_ += "DeviceID=" + encodeURIComponent("" + deviceID) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteDevice(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteDevice(<any>response_);
                } catch (e) {
                    return <Observable<IResponseOfBoolean>><any>_observableThrow(e);
                }
            } else
                return <Observable<IResponseOfBoolean>><any>_observableThrow(response_);
        }));
    }

    protected processDeleteDevice(response: HttpResponseBase): Observable<IResponseOfBoolean> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = IResponseOfBoolean.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<IResponseOfBoolean>(<any>null);
    }

    /**
     * @return OK
     */
    getScheduleGenerators(): Observable<IResponseOfGetScheduleGeneratorResponse> {
        let url_ = this.baseUrl + "/api/Parameters/GetScheduleGenerators";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetScheduleGenerators(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetScheduleGenerators(<any>response_);
                } catch (e) {
                    return <Observable<IResponseOfGetScheduleGeneratorResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<IResponseOfGetScheduleGeneratorResponse>><any>_observableThrow(response_);
        }));
    }

    protected processGetScheduleGenerators(response: HttpResponseBase): Observable<IResponseOfGetScheduleGeneratorResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = IResponseOfGetScheduleGeneratorResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<IResponseOfGetScheduleGeneratorResponse>(<any>null);
    }

    /**
     * @return OK
     */
    editScheduleGenerator(model: GetScheduleGeneratorItems): Observable<IResponseOfBoolean> {
        let url_ = this.baseUrl + "/api/Parameters/EditScheduleGenerator";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processEditScheduleGenerator(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processEditScheduleGenerator(<any>response_);
                } catch (e) {
                    return <Observable<IResponseOfBoolean>><any>_observableThrow(e);
                }
            } else
                return <Observable<IResponseOfBoolean>><any>_observableThrow(response_);
        }));
    }

    protected processEditScheduleGenerator(response: HttpResponseBase): Observable<IResponseOfBoolean> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = IResponseOfBoolean.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<IResponseOfBoolean>(<any>null);
    }

    /**
     * @return OK
     */
    addScheduleGenerator(model: AddScheduleGenerator): Observable<IResponseOfBoolean> {
        let url_ = this.baseUrl + "/api/Parameters/AddScheduleGenerator";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAddScheduleGenerator(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAddScheduleGenerator(<any>response_);
                } catch (e) {
                    return <Observable<IResponseOfBoolean>><any>_observableThrow(e);
                }
            } else
                return <Observable<IResponseOfBoolean>><any>_observableThrow(response_);
        }));
    }

    protected processAddScheduleGenerator(response: HttpResponseBase): Observable<IResponseOfBoolean> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = IResponseOfBoolean.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<IResponseOfBoolean>(<any>null);
    }

    /**
     * @return OK
     */
    deleteEmployeePosition(employeePositionID: number): Observable<IResponseOfBoolean> {
        let url_ = this.baseUrl + "/api/Parameters/DeleteEmployeePosition?";
        if (employeePositionID === undefined || employeePositionID === null)
            throw new Error("The parameter 'employeePositionID' must be defined and cannot be null.");
        else
            url_ += "employeePositionID=" + encodeURIComponent("" + employeePositionID) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteEmployeePosition(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteEmployeePosition(<any>response_);
                } catch (e) {
                    return <Observable<IResponseOfBoolean>><any>_observableThrow(e);
                }
            } else
                return <Observable<IResponseOfBoolean>><any>_observableThrow(response_);
        }));
    }

    protected processDeleteEmployeePosition(response: HttpResponseBase): Observable<IResponseOfBoolean> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = IResponseOfBoolean.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<IResponseOfBoolean>(<any>null);
    }

    /**
     * @return OK
     */
    getSalaryGenerators(): Observable<IResponseOfListOfSalaryGeneratorModel> {
        let url_ = this.baseUrl + "/api/Parameters/GetSalaryGenerators";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetSalaryGenerators(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetSalaryGenerators(<any>response_);
                } catch (e) {
                    return <Observable<IResponseOfListOfSalaryGeneratorModel>><any>_observableThrow(e);
                }
            } else
                return <Observable<IResponseOfListOfSalaryGeneratorModel>><any>_observableThrow(response_);
        }));
    }

    protected processGetSalaryGenerators(response: HttpResponseBase): Observable<IResponseOfListOfSalaryGeneratorModel> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = IResponseOfListOfSalaryGeneratorModel.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<IResponseOfListOfSalaryGeneratorModel>(<any>null);
    }

    /**
     * @return OK
     */
    editSalaryGenerators(model: SalaryGeneratorModel): Observable<IResponseOfBoolean> {
        let url_ = this.baseUrl + "/api/Parameters/EditSalaryGenerators";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processEditSalaryGenerators(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processEditSalaryGenerators(<any>response_);
                } catch (e) {
                    return <Observable<IResponseOfBoolean>><any>_observableThrow(e);
                }
            } else
                return <Observable<IResponseOfBoolean>><any>_observableThrow(response_);
        }));
    }

    protected processEditSalaryGenerators(response: HttpResponseBase): Observable<IResponseOfBoolean> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = IResponseOfBoolean.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<IResponseOfBoolean>(<any>null);
    }

    /**
     * @return OK
     */
    addSalaryGenerator(model: SalaryGeneratorModel): Observable<IResponseOfBoolean> {
        let url_ = this.baseUrl + "/api/Parameters/AddSalaryGenerator";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAddSalaryGenerator(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAddSalaryGenerator(<any>response_);
                } catch (e) {
                    return <Observable<IResponseOfBoolean>><any>_observableThrow(e);
                }
            } else
                return <Observable<IResponseOfBoolean>><any>_observableThrow(response_);
        }));
    }

    protected processAddSalaryGenerator(response: HttpResponseBase): Observable<IResponseOfBoolean> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = IResponseOfBoolean.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<IResponseOfBoolean>(<any>null);
    }

    /**
     * @return OK
     */
    addBranch(model: AddBranchRequest): Observable<IResponseOfAddBranchResponse> {
        let url_ = this.baseUrl + "/api/Parameters/AddBranch";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAddBranch(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAddBranch(<any>response_);
                } catch (e) {
                    return <Observable<IResponseOfAddBranchResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<IResponseOfAddBranchResponse>><any>_observableThrow(response_);
        }));
    }

    protected processAddBranch(response: HttpResponseBase): Observable<IResponseOfAddBranchResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = IResponseOfAddBranchResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<IResponseOfAddBranchResponse>(<any>null);
    }

    /**
     * @return OK
     */
    editBranch(model: EditBranchRequest): Observable<IResponseOfEditBranchResponse> {
        let url_ = this.baseUrl + "/api/Parameters/EditBranch";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processEditBranch(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processEditBranch(<any>response_);
                } catch (e) {
                    return <Observable<IResponseOfEditBranchResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<IResponseOfEditBranchResponse>><any>_observableThrow(response_);
        }));
    }

    protected processEditBranch(response: HttpResponseBase): Observable<IResponseOfEditBranchResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = IResponseOfEditBranchResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<IResponseOfEditBranchResponse>(<any>null);
    }

    /**
     * @return OK
     */
    getEmployeePositionsList(): Observable<IResponseOfGetEmployeePositionsResponse> {
        let url_ = this.baseUrl + "/api/Parameters/GetEmployeePositionsList";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetEmployeePositionsList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetEmployeePositionsList(<any>response_);
                } catch (e) {
                    return <Observable<IResponseOfGetEmployeePositionsResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<IResponseOfGetEmployeePositionsResponse>><any>_observableThrow(response_);
        }));
    }

    protected processGetEmployeePositionsList(response: HttpResponseBase): Observable<IResponseOfGetEmployeePositionsResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = IResponseOfGetEmployeePositionsResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<IResponseOfGetEmployeePositionsResponse>(<any>null);
    }

    /**
     * @return OK
     */
    addEmployeePositionType(model: AddEmployeePositionRequest): Observable<IResponseOfAddEmployeePositionResponse> {
        let url_ = this.baseUrl + "/api/Parameters/AddEmployeePositionType";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAddEmployeePositionType(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAddEmployeePositionType(<any>response_);
                } catch (e) {
                    return <Observable<IResponseOfAddEmployeePositionResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<IResponseOfAddEmployeePositionResponse>><any>_observableThrow(response_);
        }));
    }

    protected processAddEmployeePositionType(response: HttpResponseBase): Observable<IResponseOfAddEmployeePositionResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = IResponseOfAddEmployeePositionResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<IResponseOfAddEmployeePositionResponse>(<any>null);
    }

    /**
     * @return OK
     */
    editEmployeePosition(model: EditEmployeePositionRequest): Observable<IResponseOfEditEmployeePositionResponse> {
        let url_ = this.baseUrl + "/api/Parameters/EditEmployeePosition";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processEditEmployeePosition(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processEditEmployeePosition(<any>response_);
                } catch (e) {
                    return <Observable<IResponseOfEditEmployeePositionResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<IResponseOfEditEmployeePositionResponse>><any>_observableThrow(response_);
        }));
    }

    protected processEditEmployeePosition(response: HttpResponseBase): Observable<IResponseOfEditEmployeePositionResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = IResponseOfEditEmployeePositionResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<IResponseOfEditEmployeePositionResponse>(<any>null);
    }

    /**
     * @return OK
     */
    getSalaryTypesList(): Observable<IResponseOfGetSalaryTypeListResponse> {
        let url_ = this.baseUrl + "/api/Parameters/GetSalaryTypesList";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetSalaryTypesList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetSalaryTypesList(<any>response_);
                } catch (e) {
                    return <Observable<IResponseOfGetSalaryTypeListResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<IResponseOfGetSalaryTypeListResponse>><any>_observableThrow(response_);
        }));
    }

    protected processGetSalaryTypesList(response: HttpResponseBase): Observable<IResponseOfGetSalaryTypeListResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = IResponseOfGetSalaryTypeListResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<IResponseOfGetSalaryTypeListResponse>(<any>null);
    }

    /**
     * @return OK
     */
    addSalaryType(model: AddSalaryTypeRequest): Observable<IResponseOfAddSalaryTypeResponse> {
        let url_ = this.baseUrl + "/api/Parameters/AddSalaryType";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAddSalaryType(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAddSalaryType(<any>response_);
                } catch (e) {
                    return <Observable<IResponseOfAddSalaryTypeResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<IResponseOfAddSalaryTypeResponse>><any>_observableThrow(response_);
        }));
    }

    protected processAddSalaryType(response: HttpResponseBase): Observable<IResponseOfAddSalaryTypeResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = IResponseOfAddSalaryTypeResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<IResponseOfAddSalaryTypeResponse>(<any>null);
    }

    /**
     * @return OK
     */
    editSalaryType(model: EditSalaryTypeRequest): Observable<IResponseOfEditSalaryTypeResponse> {
        let url_ = this.baseUrl + "/api/Parameters/EditSalaryType";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processEditSalaryType(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processEditSalaryType(<any>response_);
                } catch (e) {
                    return <Observable<IResponseOfEditSalaryTypeResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<IResponseOfEditSalaryTypeResponse>><any>_observableThrow(response_);
        }));
    }

    protected processEditSalaryType(response: HttpResponseBase): Observable<IResponseOfEditSalaryTypeResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = IResponseOfEditSalaryTypeResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<IResponseOfEditSalaryTypeResponse>(<any>null);
    }

    /**
     * @return OK
     */
    getFineTypesLIst(): Observable<IResponseOfGetFineTypeListResponse> {
        let url_ = this.baseUrl + "/api/Parameters/GetFineTypesLIst";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetFineTypesLIst(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetFineTypesLIst(<any>response_);
                } catch (e) {
                    return <Observable<IResponseOfGetFineTypeListResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<IResponseOfGetFineTypeListResponse>><any>_observableThrow(response_);
        }));
    }

    protected processGetFineTypesLIst(response: HttpResponseBase): Observable<IResponseOfGetFineTypeListResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = IResponseOfGetFineTypeListResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<IResponseOfGetFineTypeListResponse>(<any>null);
    }

    /**
     * @return OK
     */
    addFineType(model: AddFineTypeRequest): Observable<IResponseOfAddFineTypeResponse> {
        let url_ = this.baseUrl + "/api/Parameters/AddFineType";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAddFineType(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAddFineType(<any>response_);
                } catch (e) {
                    return <Observable<IResponseOfAddFineTypeResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<IResponseOfAddFineTypeResponse>><any>_observableThrow(response_);
        }));
    }

    protected processAddFineType(response: HttpResponseBase): Observable<IResponseOfAddFineTypeResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = IResponseOfAddFineTypeResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<IResponseOfAddFineTypeResponse>(<any>null);
    }

    /**
     * @return OK
     */
    editFineType(model: EditFineTypeRequest): Observable<IResponseOfEditFineTypeResponse> {
        let url_ = this.baseUrl + "/api/Parameters/EditFineType";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processEditFineType(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processEditFineType(<any>response_);
                } catch (e) {
                    return <Observable<IResponseOfEditFineTypeResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<IResponseOfEditFineTypeResponse>><any>_observableThrow(response_);
        }));
    }

    protected processEditFineType(response: HttpResponseBase): Observable<IResponseOfEditFineTypeResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = IResponseOfEditFineTypeResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<IResponseOfEditFineTypeResponse>(<any>null);
    }

    /**
     * @return OK
     */
    getForgivenessTypesLIst(): Observable<IResponseOfGetForgivenessTypeListResponse> {
        let url_ = this.baseUrl + "/api/Parameters/GetForgivenessTypesLIst";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetForgivenessTypesLIst(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetForgivenessTypesLIst(<any>response_);
                } catch (e) {
                    return <Observable<IResponseOfGetForgivenessTypeListResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<IResponseOfGetForgivenessTypeListResponse>><any>_observableThrow(response_);
        }));
    }

    protected processGetForgivenessTypesLIst(response: HttpResponseBase): Observable<IResponseOfGetForgivenessTypeListResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = IResponseOfGetForgivenessTypeListResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<IResponseOfGetForgivenessTypeListResponse>(<any>null);
    }

    /**
     * @return OK
     */
    getCountryList(): Observable<IResponseOfGetCountryListResponse> {
        let url_ = this.baseUrl + "/api/Parameters/GetCountryList";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetCountryList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetCountryList(<any>response_);
                } catch (e) {
                    return <Observable<IResponseOfGetCountryListResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<IResponseOfGetCountryListResponse>><any>_observableThrow(response_);
        }));
    }

    protected processGetCountryList(response: HttpResponseBase): Observable<IResponseOfGetCountryListResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = IResponseOfGetCountryListResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<IResponseOfGetCountryListResponse>(<any>null);
    }

    /**
     * @return OK
     */
    getCitiesListByCountryID(countryID: number): Observable<IResponseOfGetCitiesListByCountryIDResponse> {
        let url_ = this.baseUrl + "/api/Parameters/GetCitiesListByCountryID?";
        if (countryID === undefined || countryID === null)
            throw new Error("The parameter 'countryID' must be defined and cannot be null.");
        else
            url_ += "countryID=" + encodeURIComponent("" + countryID) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetCitiesListByCountryID(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetCitiesListByCountryID(<any>response_);
                } catch (e) {
                    return <Observable<IResponseOfGetCitiesListByCountryIDResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<IResponseOfGetCitiesListByCountryIDResponse>><any>_observableThrow(response_);
        }));
    }

    protected processGetCitiesListByCountryID(response: HttpResponseBase): Observable<IResponseOfGetCitiesListByCountryIDResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = IResponseOfGetCitiesListByCountryIDResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<IResponseOfGetCitiesListByCountryIDResponse>(<any>null);
    }

    /**
     * @return OK
     */
    getDeviceTypeList(): Observable<IResponseOfGetDeviceTypeListResponse> {
        let url_ = this.baseUrl + "/api/Parameters/GetDeviceTypeList";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetDeviceTypeList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetDeviceTypeList(<any>response_);
                } catch (e) {
                    return <Observable<IResponseOfGetDeviceTypeListResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<IResponseOfGetDeviceTypeListResponse>><any>_observableThrow(response_);
        }));
    }

    protected processGetDeviceTypeList(response: HttpResponseBase): Observable<IResponseOfGetDeviceTypeListResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = IResponseOfGetDeviceTypeListResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<IResponseOfGetDeviceTypeListResponse>(<any>null);
    }

    /**
     * @return OK
     */
    getDeviceLocationInBranchList(): Observable<IResponseOfGetDeviceLocationInBranchListResponse> {
        let url_ = this.baseUrl + "/api/Parameters/GetDeviceLocationInBranchList";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetDeviceLocationInBranchList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetDeviceLocationInBranchList(<any>response_);
                } catch (e) {
                    return <Observable<IResponseOfGetDeviceLocationInBranchListResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<IResponseOfGetDeviceLocationInBranchListResponse>><any>_observableThrow(response_);
        }));
    }

    protected processGetDeviceLocationInBranchList(response: HttpResponseBase): Observable<IResponseOfGetDeviceLocationInBranchListResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = IResponseOfGetDeviceLocationInBranchListResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<IResponseOfGetDeviceLocationInBranchListResponse>(<any>null);
    }

    /**
     * @return OK
     */
    addDeviceLocationInBranch(model: AddDeviceLocationInBranchRequest): Observable<IResponseOfAddDeviceLocationInBranchResponse> {
        let url_ = this.baseUrl + "/api/Parameters/AddDeviceLocationInBranch";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAddDeviceLocationInBranch(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAddDeviceLocationInBranch(<any>response_);
                } catch (e) {
                    return <Observable<IResponseOfAddDeviceLocationInBranchResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<IResponseOfAddDeviceLocationInBranchResponse>><any>_observableThrow(response_);
        }));
    }

    protected processAddDeviceLocationInBranch(response: HttpResponseBase): Observable<IResponseOfAddDeviceLocationInBranchResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = IResponseOfAddDeviceLocationInBranchResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<IResponseOfAddDeviceLocationInBranchResponse>(<any>null);
    }

    /**
     * @return OK
     */
    editDeviceLocationInBranch(model: EditDeviceLocationInBranchRequest): Observable<IResponseOfEditDeviceLocationInBranchResponse> {
        let url_ = this.baseUrl + "/api/Parameters/EditDeviceLocationInBranch";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processEditDeviceLocationInBranch(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processEditDeviceLocationInBranch(<any>response_);
                } catch (e) {
                    return <Observable<IResponseOfEditDeviceLocationInBranchResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<IResponseOfEditDeviceLocationInBranchResponse>><any>_observableThrow(response_);
        }));
    }

    protected processEditDeviceLocationInBranch(response: HttpResponseBase): Observable<IResponseOfEditDeviceLocationInBranchResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = IResponseOfEditDeviceLocationInBranchResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<IResponseOfEditDeviceLocationInBranchResponse>(<any>null);
    }

    /**
     * @return OK
     */
    addForgivenessType(model: AddForgivenessTypeRequest): Observable<IResponseOfAddForgivenessTypeResponse> {
        let url_ = this.baseUrl + "/api/Parameters/AddForgivenessType";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAddForgivenessType(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAddForgivenessType(<any>response_);
                } catch (e) {
                    return <Observable<IResponseOfAddForgivenessTypeResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<IResponseOfAddForgivenessTypeResponse>><any>_observableThrow(response_);
        }));
    }

    protected processAddForgivenessType(response: HttpResponseBase): Observable<IResponseOfAddForgivenessTypeResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = IResponseOfAddForgivenessTypeResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<IResponseOfAddForgivenessTypeResponse>(<any>null);
    }

    /**
     * @return OK
     */
    editForgivenessType(model: EditForgivenessTypeRequest): Observable<IResponseOfEditForgivenessTypeResponse> {
        let url_ = this.baseUrl + "/api/Parameters/EditForgivenessType";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processEditForgivenessType(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processEditForgivenessType(<any>response_);
                } catch (e) {
                    return <Observable<IResponseOfEditForgivenessTypeResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<IResponseOfEditForgivenessTypeResponse>><any>_observableThrow(response_);
        }));
    }

    protected processEditForgivenessType(response: HttpResponseBase): Observable<IResponseOfEditForgivenessTypeResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = IResponseOfEditForgivenessTypeResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<IResponseOfEditForgivenessTypeResponse>(<any>null);
    }

    /**
     * @return OK
     */
    getHolidayTypeList(): Observable<IResponseOfGetHolidayTypesListResponse> {
        let url_ = this.baseUrl + "/api/Parameters/GetHolidayTypeList";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetHolidayTypeList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetHolidayTypeList(<any>response_);
                } catch (e) {
                    return <Observable<IResponseOfGetHolidayTypesListResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<IResponseOfGetHolidayTypesListResponse>><any>_observableThrow(response_);
        }));
    }

    protected processGetHolidayTypeList(response: HttpResponseBase): Observable<IResponseOfGetHolidayTypesListResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = IResponseOfGetHolidayTypesListResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<IResponseOfGetHolidayTypesListResponse>(<any>null);
    }
}

export interface IRemoteDeviceService {
    /**
     * @return OK
     */
    getMachineDateTime(): Observable<IResponseOfDateTime>;
    /**
     * @return OK
     */
    addDevice(model: AddDeviceRequest): Observable<IResponseOfBoolean>;
    /**
     * @return OK
     */
    editDevice(model: AddDeviceRequest): Observable<IResponseOfBoolean>;
    /**
     * @return OK
     */
    getDeviceForEdit(deviceID: number): Observable<IResponseOfAddDeviceRequest>;
    /**
     * @return OK
     */
    getDeviceUserLogList(): Observable<IResponseOfGetDeviceUserLogResponse>;
    /**
     * @return OK
     */
    getDeviceList(): Observable<IResponseOfGetDeviceListResponse>;
    /**
     * @return No Content
     */
    syncUserLog(updateUserList: boolean, syncUserLog: boolean): Observable<void>;
    /**
     * @return OK
     */
    addDeviceLog(model: DeviceUserLog): Observable<IResponseOfBoolean>;
    /**
     * @return OK
     */
    deleteDeviceLog(logID: number): Observable<IResponseOfBoolean>;
    /**
     * @return OK
     */
    getDeviceUserLogForEdit(iD: number): Observable<IResponseOfGetDeviceUserLogItemForEdit>;
    /**
     * @return OK
     */
    editDeviceUserLog(model: GetDeviceUserLogItemForEdit): Observable<IResponseOfBoolean>;
    /**
     * @return OK
     */
    syncIsRunning(): Observable<IResponseOfBoolean>;
    /**
     * @return OK
     */
    clearDeviceData(): Observable<IResponseOfBoolean>;
    /**
     * @return OK
     */
    updateUserListFromDevice(): Observable<IResponseOfBoolean>;
    /**
     * @param request_isRegistrated (optional) 
     * @return OK
     */
    getDeviceUserList(request_isRegistrated: boolean | null | undefined): Observable<IResponseOfDeviceUserListResponse>;
    /**
     * @return OK
     */
    insertUserToDevice(userID: number): Observable<IResponseOfBoolean>;
    /**
     * @return OK
     */
    getAllUserInfo(machineNumber: number): Observable<UserInfo[]>;
}

@Injectable({
    providedIn: 'root'
})
export class RemoteDeviceService implements IRemoteDeviceService {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:44376";
    }

    /**
     * @return OK
     */
    getMachineDateTime(): Observable<IResponseOfDateTime> {
        let url_ = this.baseUrl + "/api/RemoteDevice/GetMachineDateTime";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetMachineDateTime(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetMachineDateTime(<any>response_);
                } catch (e) {
                    return <Observable<IResponseOfDateTime>><any>_observableThrow(e);
                }
            } else
                return <Observable<IResponseOfDateTime>><any>_observableThrow(response_);
        }));
    }

    protected processGetMachineDateTime(response: HttpResponseBase): Observable<IResponseOfDateTime> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = IResponseOfDateTime.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<IResponseOfDateTime>(<any>null);
    }

    /**
     * @return OK
     */
    addDevice(model: AddDeviceRequest): Observable<IResponseOfBoolean> {
        let url_ = this.baseUrl + "/api/RemoteDevice/AddDevice";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAddDevice(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAddDevice(<any>response_);
                } catch (e) {
                    return <Observable<IResponseOfBoolean>><any>_observableThrow(e);
                }
            } else
                return <Observable<IResponseOfBoolean>><any>_observableThrow(response_);
        }));
    }

    protected processAddDevice(response: HttpResponseBase): Observable<IResponseOfBoolean> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = IResponseOfBoolean.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<IResponseOfBoolean>(<any>null);
    }

    /**
     * @return OK
     */
    editDevice(model: AddDeviceRequest): Observable<IResponseOfBoolean> {
        let url_ = this.baseUrl + "/api/RemoteDevice/EditDevice";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processEditDevice(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processEditDevice(<any>response_);
                } catch (e) {
                    return <Observable<IResponseOfBoolean>><any>_observableThrow(e);
                }
            } else
                return <Observable<IResponseOfBoolean>><any>_observableThrow(response_);
        }));
    }

    protected processEditDevice(response: HttpResponseBase): Observable<IResponseOfBoolean> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = IResponseOfBoolean.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<IResponseOfBoolean>(<any>null);
    }

    /**
     * @return OK
     */
    getDeviceForEdit(deviceID: number): Observable<IResponseOfAddDeviceRequest> {
        let url_ = this.baseUrl + "/api/RemoteDevice/GetDeviceForEdit?";
        if (deviceID === undefined || deviceID === null)
            throw new Error("The parameter 'deviceID' must be defined and cannot be null.");
        else
            url_ += "deviceID=" + encodeURIComponent("" + deviceID) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetDeviceForEdit(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetDeviceForEdit(<any>response_);
                } catch (e) {
                    return <Observable<IResponseOfAddDeviceRequest>><any>_observableThrow(e);
                }
            } else
                return <Observable<IResponseOfAddDeviceRequest>><any>_observableThrow(response_);
        }));
    }

    protected processGetDeviceForEdit(response: HttpResponseBase): Observable<IResponseOfAddDeviceRequest> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = IResponseOfAddDeviceRequest.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<IResponseOfAddDeviceRequest>(<any>null);
    }

    /**
     * @return OK
     */
    getDeviceUserLogList(): Observable<IResponseOfGetDeviceUserLogResponse> {
        let url_ = this.baseUrl + "/api/RemoteDevice/GetDeviceUserLogList";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetDeviceUserLogList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetDeviceUserLogList(<any>response_);
                } catch (e) {
                    return <Observable<IResponseOfGetDeviceUserLogResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<IResponseOfGetDeviceUserLogResponse>><any>_observableThrow(response_);
        }));
    }

    protected processGetDeviceUserLogList(response: HttpResponseBase): Observable<IResponseOfGetDeviceUserLogResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = IResponseOfGetDeviceUserLogResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<IResponseOfGetDeviceUserLogResponse>(<any>null);
    }

    /**
     * @return OK
     */
    getDeviceList(): Observable<IResponseOfGetDeviceListResponse> {
        let url_ = this.baseUrl + "/api/RemoteDevice/GetDeviceList";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetDeviceList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetDeviceList(<any>response_);
                } catch (e) {
                    return <Observable<IResponseOfGetDeviceListResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<IResponseOfGetDeviceListResponse>><any>_observableThrow(response_);
        }));
    }

    protected processGetDeviceList(response: HttpResponseBase): Observable<IResponseOfGetDeviceListResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = IResponseOfGetDeviceListResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<IResponseOfGetDeviceListResponse>(<any>null);
    }

    /**
     * @return No Content
     */
    syncUserLog(updateUserList: boolean, syncUserLog: boolean): Observable<void> {
        let url_ = this.baseUrl + "/api/RemoteDevice/SyncUserLog?";
        if (updateUserList === undefined || updateUserList === null)
            throw new Error("The parameter 'updateUserList' must be defined and cannot be null.");
        else
            url_ += "updateUserList=" + encodeURIComponent("" + updateUserList) + "&";
        if (syncUserLog === undefined || syncUserLog === null)
            throw new Error("The parameter 'syncUserLog' must be defined and cannot be null.");
        else
            url_ += "syncUserLog=" + encodeURIComponent("" + syncUserLog) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSyncUserLog(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSyncUserLog(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processSyncUserLog(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * @return OK
     */
    addDeviceLog(model: DeviceUserLog): Observable<IResponseOfBoolean> {
        let url_ = this.baseUrl + "/api/RemoteDevice/AddDeviceLog";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAddDeviceLog(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAddDeviceLog(<any>response_);
                } catch (e) {
                    return <Observable<IResponseOfBoolean>><any>_observableThrow(e);
                }
            } else
                return <Observable<IResponseOfBoolean>><any>_observableThrow(response_);
        }));
    }

    protected processAddDeviceLog(response: HttpResponseBase): Observable<IResponseOfBoolean> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = IResponseOfBoolean.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<IResponseOfBoolean>(<any>null);
    }

    /**
     * @return OK
     */
    deleteDeviceLog(logID: number): Observable<IResponseOfBoolean> {
        let url_ = this.baseUrl + "/api/RemoteDevice/DeleteDeviceLog?";
        if (logID === undefined || logID === null)
            throw new Error("The parameter 'logID' must be defined and cannot be null.");
        else
            url_ += "logID=" + encodeURIComponent("" + logID) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteDeviceLog(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteDeviceLog(<any>response_);
                } catch (e) {
                    return <Observable<IResponseOfBoolean>><any>_observableThrow(e);
                }
            } else
                return <Observable<IResponseOfBoolean>><any>_observableThrow(response_);
        }));
    }

    protected processDeleteDeviceLog(response: HttpResponseBase): Observable<IResponseOfBoolean> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = IResponseOfBoolean.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<IResponseOfBoolean>(<any>null);
    }

    /**
     * @return OK
     */
    getDeviceUserLogForEdit(iD: number): Observable<IResponseOfGetDeviceUserLogItemForEdit> {
        let url_ = this.baseUrl + "/api/RemoteDevice/GetDeviceUserLogForEdit/{ID}";
        if (iD === undefined || iD === null)
            throw new Error("The parameter 'iD' must be defined.");
        url_ = url_.replace("{ID}", encodeURIComponent("" + iD));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetDeviceUserLogForEdit(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetDeviceUserLogForEdit(<any>response_);
                } catch (e) {
                    return <Observable<IResponseOfGetDeviceUserLogItemForEdit>><any>_observableThrow(e);
                }
            } else
                return <Observable<IResponseOfGetDeviceUserLogItemForEdit>><any>_observableThrow(response_);
        }));
    }

    protected processGetDeviceUserLogForEdit(response: HttpResponseBase): Observable<IResponseOfGetDeviceUserLogItemForEdit> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = IResponseOfGetDeviceUserLogItemForEdit.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<IResponseOfGetDeviceUserLogItemForEdit>(<any>null);
    }

    /**
     * @return OK
     */
    editDeviceUserLog(model: GetDeviceUserLogItemForEdit): Observable<IResponseOfBoolean> {
        let url_ = this.baseUrl + "/api/RemoteDevice/EditDeviceUserLog";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processEditDeviceUserLog(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processEditDeviceUserLog(<any>response_);
                } catch (e) {
                    return <Observable<IResponseOfBoolean>><any>_observableThrow(e);
                }
            } else
                return <Observable<IResponseOfBoolean>><any>_observableThrow(response_);
        }));
    }

    protected processEditDeviceUserLog(response: HttpResponseBase): Observable<IResponseOfBoolean> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = IResponseOfBoolean.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<IResponseOfBoolean>(<any>null);
    }

    /**
     * @return OK
     */
    syncIsRunning(): Observable<IResponseOfBoolean> {
        let url_ = this.baseUrl + "/api/RemoteDevice/SyncIsRunning";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSyncIsRunning(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSyncIsRunning(<any>response_);
                } catch (e) {
                    return <Observable<IResponseOfBoolean>><any>_observableThrow(e);
                }
            } else
                return <Observable<IResponseOfBoolean>><any>_observableThrow(response_);
        }));
    }

    protected processSyncIsRunning(response: HttpResponseBase): Observable<IResponseOfBoolean> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = IResponseOfBoolean.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<IResponseOfBoolean>(<any>null);
    }

    /**
     * @return OK
     */
    clearDeviceData(): Observable<IResponseOfBoolean> {
        let url_ = this.baseUrl + "/api/RemoteDevice/ClearDeviceData";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processClearDeviceData(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processClearDeviceData(<any>response_);
                } catch (e) {
                    return <Observable<IResponseOfBoolean>><any>_observableThrow(e);
                }
            } else
                return <Observable<IResponseOfBoolean>><any>_observableThrow(response_);
        }));
    }

    protected processClearDeviceData(response: HttpResponseBase): Observable<IResponseOfBoolean> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = IResponseOfBoolean.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<IResponseOfBoolean>(<any>null);
    }

    /**
     * @return OK
     */
    updateUserListFromDevice(): Observable<IResponseOfBoolean> {
        let url_ = this.baseUrl + "/api/RemoteDevice/UpdateUserListFromDevice";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateUserListFromDevice(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateUserListFromDevice(<any>response_);
                } catch (e) {
                    return <Observable<IResponseOfBoolean>><any>_observableThrow(e);
                }
            } else
                return <Observable<IResponseOfBoolean>><any>_observableThrow(response_);
        }));
    }

    protected processUpdateUserListFromDevice(response: HttpResponseBase): Observable<IResponseOfBoolean> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = IResponseOfBoolean.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<IResponseOfBoolean>(<any>null);
    }

    /**
     * @param request_isRegistrated (optional) 
     * @return OK
     */
    getDeviceUserList(request_isRegistrated: boolean | null | undefined): Observable<IResponseOfDeviceUserListResponse> {
        let url_ = this.baseUrl + "/api/RemoteDevice/GetDeviceUserList?";
        if (request_isRegistrated !== undefined && request_isRegistrated !== null)
            url_ += "request.isRegistrated=" + encodeURIComponent("" + request_isRegistrated) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetDeviceUserList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetDeviceUserList(<any>response_);
                } catch (e) {
                    return <Observable<IResponseOfDeviceUserListResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<IResponseOfDeviceUserListResponse>><any>_observableThrow(response_);
        }));
    }

    protected processGetDeviceUserList(response: HttpResponseBase): Observable<IResponseOfDeviceUserListResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = IResponseOfDeviceUserListResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<IResponseOfDeviceUserListResponse>(<any>null);
    }

    /**
     * @return OK
     */
    insertUserToDevice(userID: number): Observable<IResponseOfBoolean> {
        let url_ = this.baseUrl + "/api/RemoteDevice/InsertUserToDevice?";
        if (userID === undefined || userID === null)
            throw new Error("The parameter 'userID' must be defined and cannot be null.");
        else
            url_ += "UserID=" + encodeURIComponent("" + userID) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processInsertUserToDevice(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processInsertUserToDevice(<any>response_);
                } catch (e) {
                    return <Observable<IResponseOfBoolean>><any>_observableThrow(e);
                }
            } else
                return <Observable<IResponseOfBoolean>><any>_observableThrow(response_);
        }));
    }

    protected processInsertUserToDevice(response: HttpResponseBase): Observable<IResponseOfBoolean> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = IResponseOfBoolean.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<IResponseOfBoolean>(<any>null);
    }

    /**
     * @return OK
     */
    getAllUserInfo(machineNumber: number): Observable<UserInfo[]> {
        let url_ = this.baseUrl + "/api/RemoteDevice/GetAllUserInfo?";
        if (machineNumber === undefined || machineNumber === null)
            throw new Error("The parameter 'machineNumber' must be defined and cannot be null.");
        else
            url_ += "machineNumber=" + encodeURIComponent("" + machineNumber) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAllUserInfo(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAllUserInfo(<any>response_);
                } catch (e) {
                    return <Observable<UserInfo[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<UserInfo[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetAllUserInfo(response: HttpResponseBase): Observable<UserInfo[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(UserInfo.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<UserInfo[]>(<any>null);
    }
}

export interface IValuesService {
    /**
     * @return OK
     */
    get(): Observable<string[]>;
}

@Injectable({
    providedIn: 'root'
})
export class ValuesService implements IValuesService {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:44376";
    }

    /**
     * @return OK
     */
    get(): Observable<string[]> {
        let url_ = this.baseUrl + "/api/Values/Get";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(<any>response_);
                } catch (e) {
                    return <Observable<string[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<string[]>><any>_observableThrow(response_);
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<string[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(item);
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<string[]>(<any>null);
    }
}

export class IResponseOfString implements IIResponseOfString {
    ok!: boolean;
    errors?: string[] | undefined;
    data?: string | undefined;

    constructor(data?: IIResponseOfString) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ok = _data["Ok"];
            if (Array.isArray(_data["Errors"])) {
                this.errors = [] as any;
                for (let item of _data["Errors"])
                    this.errors!.push(item);
            }
            this.data = _data["Data"];
        }
    }

    static fromJS(data: any): IResponseOfString {
        data = typeof data === 'object' ? data : {};
        let result = new IResponseOfString();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Ok"] = this.ok;
        if (Array.isArray(this.errors)) {
            data["Errors"] = [];
            for (let item of this.errors)
                data["Errors"].push(item);
        }
        data["Data"] = this.data;
        return data; 
    }
}

export interface IIResponseOfString {
    ok: boolean;
    errors?: string[] | undefined;
    data?: string | undefined;
}

export class IResponseOfBoolean implements IIResponseOfBoolean {
    ok!: boolean;
    errors?: string[] | undefined;
    data?: boolean | undefined;

    constructor(data?: IIResponseOfBoolean) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ok = _data["Ok"];
            if (Array.isArray(_data["Errors"])) {
                this.errors = [] as any;
                for (let item of _data["Errors"])
                    this.errors!.push(item);
            }
            this.data = _data["Data"];
        }
    }

    static fromJS(data: any): IResponseOfBoolean {
        data = typeof data === 'object' ? data : {};
        let result = new IResponseOfBoolean();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Ok"] = this.ok;
        if (Array.isArray(this.errors)) {
            data["Errors"] = [];
            for (let item of this.errors)
                data["Errors"].push(item);
        }
        data["Data"] = this.data;
        return data; 
    }
}

export interface IIResponseOfBoolean {
    ok: boolean;
    errors?: string[] | undefined;
    data?: boolean | undefined;
}

export class AddEmployeeRequestModel implements IAddEmployeeRequestModel {
    avatarImage?: string | undefined;
    avatarFormat?: string | undefined;
    agreement?: string | undefined;
    userIdInDevice?: number | undefined;
    firsName?: string | undefined;
    firsName_ka?: string | undefined;
    firsName_ru?: string | undefined;
    lastName?: string | undefined;
    lastName_ka?: string | undefined;
    lastName_ru?: string | undefined;
    country?: string | undefined;
    dateOfBirth?: Date | undefined;
    address?: string | undefined;
    address_ka?: string | undefined;
    address_ru?: string | undefined;
    email?: string | undefined;
    isActive?: boolean | undefined;
    employeePositionID?: number | undefined;
    deviceCardID?: string | undefined;
    salaryID?: number | undefined;
    branchID?: number | undefined;
    departmentID?: number | undefined;
    genderID?: number | undefined;
    personalNumber?: string | undefined;
    mobileNumbers?: string[] | undefined;
    forgiveness?: Forgiveness | undefined;
    fine?: Fine | undefined;
    salary?: SalaryData | undefined;
    schedule?: ScheduleData | undefined;
    employeeHolidays?: EmployeeHolidays[] | undefined;

    constructor(data?: IAddEmployeeRequestModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.avatarImage = _data["AvatarImage"];
            this.avatarFormat = _data["AvatarFormat"];
            this.agreement = _data["Agreement"];
            this.userIdInDevice = _data["UserIdInDevice"];
            this.firsName = _data["FirsName"];
            this.firsName_ka = _data["FirsName_ka"];
            this.firsName_ru = _data["FirsName_ru"];
            this.lastName = _data["LastName"];
            this.lastName_ka = _data["LastName_ka"];
            this.lastName_ru = _data["LastName_ru"];
            this.country = _data["Country"];
            this.dateOfBirth = _data["DateOfBirth"] ? new Date(_data["DateOfBirth"].toString()) : <any>undefined;
            this.address = _data["Address"];
            this.address_ka = _data["Address_ka"];
            this.address_ru = _data["Address_ru"];
            this.email = _data["Email"];
            this.isActive = _data["IsActive"];
            this.employeePositionID = _data["EmployeePositionID"];
            this.deviceCardID = _data["DeviceCardID"];
            this.salaryID = _data["SalaryID"];
            this.branchID = _data["BranchID"];
            this.departmentID = _data["DepartmentID"];
            this.genderID = _data["GenderID"];
            this.personalNumber = _data["PersonalNumber"];
            if (Array.isArray(_data["MobileNumbers"])) {
                this.mobileNumbers = [] as any;
                for (let item of _data["MobileNumbers"])
                    this.mobileNumbers!.push(item);
            }
            this.forgiveness = _data["Forgiveness"] ? Forgiveness.fromJS(_data["Forgiveness"]) : <any>undefined;
            this.fine = _data["Fine"] ? Fine.fromJS(_data["Fine"]) : <any>undefined;
            this.salary = _data["Salary"] ? SalaryData.fromJS(_data["Salary"]) : <any>undefined;
            this.schedule = _data["Schedule"] ? ScheduleData.fromJS(_data["Schedule"]) : <any>undefined;
            if (Array.isArray(_data["EmployeeHolidays"])) {
                this.employeeHolidays = [] as any;
                for (let item of _data["EmployeeHolidays"])
                    this.employeeHolidays!.push(EmployeeHolidays.fromJS(item));
            }
        }
    }

    static fromJS(data: any): AddEmployeeRequestModel {
        data = typeof data === 'object' ? data : {};
        let result = new AddEmployeeRequestModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["AvatarImage"] = this.avatarImage;
        data["AvatarFormat"] = this.avatarFormat;
        data["Agreement"] = this.agreement;
        data["UserIdInDevice"] = this.userIdInDevice;
        data["FirsName"] = this.firsName;
        data["FirsName_ka"] = this.firsName_ka;
        data["FirsName_ru"] = this.firsName_ru;
        data["LastName"] = this.lastName;
        data["LastName_ka"] = this.lastName_ka;
        data["LastName_ru"] = this.lastName_ru;
        data["Country"] = this.country;
        data["DateOfBirth"] = this.dateOfBirth ? this.dateOfBirth.toISOString() : <any>undefined;
        data["Address"] = this.address;
        data["Address_ka"] = this.address_ka;
        data["Address_ru"] = this.address_ru;
        data["Email"] = this.email;
        data["IsActive"] = this.isActive;
        data["EmployeePositionID"] = this.employeePositionID;
        data["DeviceCardID"] = this.deviceCardID;
        data["SalaryID"] = this.salaryID;
        data["BranchID"] = this.branchID;
        data["DepartmentID"] = this.departmentID;
        data["GenderID"] = this.genderID;
        data["PersonalNumber"] = this.personalNumber;
        if (Array.isArray(this.mobileNumbers)) {
            data["MobileNumbers"] = [];
            for (let item of this.mobileNumbers)
                data["MobileNumbers"].push(item);
        }
        data["Forgiveness"] = this.forgiveness ? this.forgiveness.toJSON() : <any>undefined;
        data["Fine"] = this.fine ? this.fine.toJSON() : <any>undefined;
        data["Salary"] = this.salary ? this.salary.toJSON() : <any>undefined;
        data["Schedule"] = this.schedule ? this.schedule.toJSON() : <any>undefined;
        if (Array.isArray(this.employeeHolidays)) {
            data["EmployeeHolidays"] = [];
            for (let item of this.employeeHolidays)
                data["EmployeeHolidays"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IAddEmployeeRequestModel {
    avatarImage?: string | undefined;
    avatarFormat?: string | undefined;
    agreement?: string | undefined;
    userIdInDevice?: number | undefined;
    firsName?: string | undefined;
    firsName_ka?: string | undefined;
    firsName_ru?: string | undefined;
    lastName?: string | undefined;
    lastName_ka?: string | undefined;
    lastName_ru?: string | undefined;
    country?: string | undefined;
    dateOfBirth?: Date | undefined;
    address?: string | undefined;
    address_ka?: string | undefined;
    address_ru?: string | undefined;
    email?: string | undefined;
    isActive?: boolean | undefined;
    employeePositionID?: number | undefined;
    deviceCardID?: string | undefined;
    salaryID?: number | undefined;
    branchID?: number | undefined;
    departmentID?: number | undefined;
    genderID?: number | undefined;
    personalNumber?: string | undefined;
    mobileNumbers?: string[] | undefined;
    forgiveness?: Forgiveness | undefined;
    fine?: Fine | undefined;
    salary?: SalaryData | undefined;
    schedule?: ScheduleData | undefined;
    employeeHolidays?: EmployeeHolidays[] | undefined;
}

export class Forgiveness implements IForgiveness {
    iD?: number | undefined;
    forgivenessTypeID?: number | undefined;
    amount?: number | undefined;

    constructor(data?: IForgiveness) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.iD = _data["ID"];
            this.forgivenessTypeID = _data["ForgivenessTypeID"];
            this.amount = _data["Amount"];
        }
    }

    static fromJS(data: any): Forgiveness {
        data = typeof data === 'object' ? data : {};
        let result = new Forgiveness();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ID"] = this.iD;
        data["ForgivenessTypeID"] = this.forgivenessTypeID;
        data["Amount"] = this.amount;
        return data; 
    }
}

export interface IForgiveness {
    iD?: number | undefined;
    forgivenessTypeID?: number | undefined;
    amount?: number | undefined;
}

export class Fine implements IFine {
    iD?: number | undefined;
    fineTypeID?: number | undefined;
    amount?: number | undefined;
    currencyID?: number | undefined;

    constructor(data?: IFine) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.iD = _data["ID"];
            this.fineTypeID = _data["FineTypeID"];
            this.amount = _data["Amount"];
            this.currencyID = _data["CurrencyID"];
        }
    }

    static fromJS(data: any): Fine {
        data = typeof data === 'object' ? data : {};
        let result = new Fine();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ID"] = this.iD;
        data["FineTypeID"] = this.fineTypeID;
        data["Amount"] = this.amount;
        data["CurrencyID"] = this.currencyID;
        return data; 
    }
}

export interface IFine {
    iD?: number | undefined;
    fineTypeID?: number | undefined;
    amount?: number | undefined;
    currencyID?: number | undefined;
}

export class SalaryData implements ISalaryData {
    iD?: number | undefined;
    amount?: number | undefined;
    currencyID?: number | undefined;
    isHourly?: boolean | undefined;
    salaryTypeID?: number | undefined;

    constructor(data?: ISalaryData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.iD = _data["ID"];
            this.amount = _data["Amount"];
            this.currencyID = _data["CurrencyID"];
            this.isHourly = _data["IsHourly"];
            this.salaryTypeID = _data["SalaryTypeID"];
        }
    }

    static fromJS(data: any): SalaryData {
        data = typeof data === 'object' ? data : {};
        let result = new SalaryData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ID"] = this.iD;
        data["Amount"] = this.amount;
        data["CurrencyID"] = this.currencyID;
        data["IsHourly"] = this.isHourly;
        data["SalaryTypeID"] = this.salaryTypeID;
        return data; 
    }
}

export interface ISalaryData {
    iD?: number | undefined;
    amount?: number | undefined;
    currencyID?: number | undefined;
    isHourly?: boolean | undefined;
    salaryTypeID?: number | undefined;
}

export class ScheduleData implements IScheduleData {
    iD?: number | undefined;
    scheduleTypeID?: number | undefined;
    startTime?: string | undefined;
    endTime?: string | undefined;
    breakEndTime?: string | undefined;
    breakStartTime?: string | undefined;
    minCheckInTime?: string | undefined;
    maxCheckOutTime?: string | undefined;
    breakAmount?: number | undefined;
    weekHouresAmount?: number | undefined;
    daylyHouresAmount?: number | undefined;
    onWorkingDaysOnly?: boolean | undefined;
    onWorkingHouresOnly?: boolean | undefined;
    notStandartSchedule?: boolean | undefined;
    scheduleFileData?: string | undefined;
    fileFormat?: string | undefined;

    constructor(data?: IScheduleData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.iD = _data["ID"];
            this.scheduleTypeID = _data["ScheduleTypeID"];
            this.startTime = _data["StartTime"];
            this.endTime = _data["EndTime"];
            this.breakEndTime = _data["BreakEndTime"];
            this.breakStartTime = _data["BreakStartTime"];
            this.minCheckInTime = _data["MinCheckInTime"];
            this.maxCheckOutTime = _data["MaxCheckOutTime"];
            this.breakAmount = _data["BreakAmount"];
            this.weekHouresAmount = _data["WeekHouresAmount"];
            this.daylyHouresAmount = _data["DaylyHouresAmount"];
            this.onWorkingDaysOnly = _data["OnWorkingDaysOnly"];
            this.onWorkingHouresOnly = _data["OnWorkingHouresOnly"];
            this.notStandartSchedule = _data["NotStandartSchedule"];
            this.scheduleFileData = _data["ScheduleFileData"];
            this.fileFormat = _data["FileFormat"];
        }
    }

    static fromJS(data: any): ScheduleData {
        data = typeof data === 'object' ? data : {};
        let result = new ScheduleData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ID"] = this.iD;
        data["ScheduleTypeID"] = this.scheduleTypeID;
        data["StartTime"] = this.startTime;
        data["EndTime"] = this.endTime;
        data["BreakEndTime"] = this.breakEndTime;
        data["BreakStartTime"] = this.breakStartTime;
        data["MinCheckInTime"] = this.minCheckInTime;
        data["MaxCheckOutTime"] = this.maxCheckOutTime;
        data["BreakAmount"] = this.breakAmount;
        data["WeekHouresAmount"] = this.weekHouresAmount;
        data["DaylyHouresAmount"] = this.daylyHouresAmount;
        data["OnWorkingDaysOnly"] = this.onWorkingDaysOnly;
        data["OnWorkingHouresOnly"] = this.onWorkingHouresOnly;
        data["NotStandartSchedule"] = this.notStandartSchedule;
        data["ScheduleFileData"] = this.scheduleFileData;
        data["FileFormat"] = this.fileFormat;
        return data; 
    }
}

export interface IScheduleData {
    iD?: number | undefined;
    scheduleTypeID?: number | undefined;
    startTime?: string | undefined;
    endTime?: string | undefined;
    breakEndTime?: string | undefined;
    breakStartTime?: string | undefined;
    minCheckInTime?: string | undefined;
    maxCheckOutTime?: string | undefined;
    breakAmount?: number | undefined;
    weekHouresAmount?: number | undefined;
    daylyHouresAmount?: number | undefined;
    onWorkingDaysOnly?: boolean | undefined;
    onWorkingHouresOnly?: boolean | undefined;
    notStandartSchedule?: boolean | undefined;
    scheduleFileData?: string | undefined;
    fileFormat?: string | undefined;
}

export class EmployeeHolidays implements IEmployeeHolidays {
    iD?: number | undefined;
    holidayTypeID?: number | undefined;
    allWritten?: number | undefined;
    left?: number | undefined;
    used?: number | undefined;
    numInYear?: number | undefined;
    leftInYear?: number | undefined;
    deactivateDate?: Date | undefined;
    isActive?: boolean | undefined;

    constructor(data?: IEmployeeHolidays) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.iD = _data["ID"];
            this.holidayTypeID = _data["HolidayTypeID"];
            this.allWritten = _data["AllWritten"];
            this.left = _data["Left"];
            this.used = _data["Used"];
            this.numInYear = _data["NumInYear"];
            this.leftInYear = _data["LeftInYear"];
            this.deactivateDate = _data["DeactivateDate"] ? new Date(_data["DeactivateDate"].toString()) : <any>undefined;
            this.isActive = _data["IsActive"];
        }
    }

    static fromJS(data: any): EmployeeHolidays {
        data = typeof data === 'object' ? data : {};
        let result = new EmployeeHolidays();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ID"] = this.iD;
        data["HolidayTypeID"] = this.holidayTypeID;
        data["AllWritten"] = this.allWritten;
        data["Left"] = this.left;
        data["Used"] = this.used;
        data["NumInYear"] = this.numInYear;
        data["LeftInYear"] = this.leftInYear;
        data["DeactivateDate"] = this.deactivateDate ? this.deactivateDate.toISOString() : <any>undefined;
        data["IsActive"] = this.isActive;
        return data; 
    }
}

export interface IEmployeeHolidays {
    iD?: number | undefined;
    holidayTypeID?: number | undefined;
    allWritten?: number | undefined;
    left?: number | undefined;
    used?: number | undefined;
    numInYear?: number | undefined;
    leftInYear?: number | undefined;
    deactivateDate?: Date | undefined;
    isActive?: boolean | undefined;
}

export class IResponseOfAddEmployeeResposeModel implements IIResponseOfAddEmployeeResposeModel {
    ok!: boolean;
    errors?: string[] | undefined;
    data?: AddEmployeeResposeModel | undefined;

    constructor(data?: IIResponseOfAddEmployeeResposeModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ok = _data["Ok"];
            if (Array.isArray(_data["Errors"])) {
                this.errors = [] as any;
                for (let item of _data["Errors"])
                    this.errors!.push(item);
            }
            this.data = _data["Data"] ? AddEmployeeResposeModel.fromJS(_data["Data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): IResponseOfAddEmployeeResposeModel {
        data = typeof data === 'object' ? data : {};
        let result = new IResponseOfAddEmployeeResposeModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Ok"] = this.ok;
        if (Array.isArray(this.errors)) {
            data["Errors"] = [];
            for (let item of this.errors)
                data["Errors"].push(item);
        }
        data["Data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IIResponseOfAddEmployeeResposeModel {
    ok: boolean;
    errors?: string[] | undefined;
    data?: AddEmployeeResposeModel | undefined;
}

export class AddEmployeeResposeModel implements IAddEmployeeResposeModel {

    constructor(data?: IAddEmployeeResposeModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): AddEmployeeResposeModel {
        data = typeof data === 'object' ? data : {};
        let result = new AddEmployeeResposeModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data; 
    }
}

export interface IAddEmployeeResposeModel {
}

export class GetEmployeeForEdit implements IGetEmployeeForEdit {
    iD?: number | undefined;
    avatarImage?: string | undefined;
    avatarFormat?: string | undefined;
    agreement?: string | undefined;
    employeeDetailsID?: number | undefined;
    firsName?: string | undefined;
    firsName_ka?: string | undefined;
    firsName_ru?: string | undefined;
    lastName?: string | undefined;
    lastName_ka?: string | undefined;
    lastName_ru?: string | undefined;
    country?: string | undefined;
    dateOfBirth?: Date | undefined;
    address?: string | undefined;
    address_ka?: string | undefined;
    address_ru?: string | undefined;
    email?: string | undefined;
    isActive?: boolean | undefined;
    employeePositionID?: number | undefined;
    deviceCardID?: string | undefined;
    salaryID?: number | undefined;
    userIDInDevice?: number | undefined;
    branchID?: number | undefined;
    departmentID?: number | undefined;
    genderID?: number | undefined;
    personalNumber?: string | undefined;
    mobileNumbers?: string[] | undefined;
    forgiveness?: Forgiveness | undefined;
    fine?: Fine | undefined;
    salary?: SalaryData | undefined;
    schedule?: ScheduleData | undefined;
    employeeHolidays?: EmployeeHolidays[] | undefined;

    constructor(data?: IGetEmployeeForEdit) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.iD = _data["ID"];
            this.avatarImage = _data["AvatarImage"];
            this.avatarFormat = _data["AvatarFormat"];
            this.agreement = _data["Agreement"];
            this.employeeDetailsID = _data["EmployeeDetailsID"];
            this.firsName = _data["FirsName"];
            this.firsName_ka = _data["FirsName_ka"];
            this.firsName_ru = _data["FirsName_ru"];
            this.lastName = _data["LastName"];
            this.lastName_ka = _data["LastName_ka"];
            this.lastName_ru = _data["LastName_ru"];
            this.country = _data["Country"];
            this.dateOfBirth = _data["DateOfBirth"] ? new Date(_data["DateOfBirth"].toString()) : <any>undefined;
            this.address = _data["Address"];
            this.address_ka = _data["Address_ka"];
            this.address_ru = _data["Address_ru"];
            this.email = _data["Email"];
            this.isActive = _data["IsActive"];
            this.employeePositionID = _data["EmployeePositionID"];
            this.deviceCardID = _data["DeviceCardID"];
            this.salaryID = _data["SalaryID"];
            this.userIDInDevice = _data["UserIDInDevice"];
            this.branchID = _data["BranchID"];
            this.departmentID = _data["DepartmentID"];
            this.genderID = _data["GenderID"];
            this.personalNumber = _data["PersonalNumber"];
            if (Array.isArray(_data["MobileNumbers"])) {
                this.mobileNumbers = [] as any;
                for (let item of _data["MobileNumbers"])
                    this.mobileNumbers!.push(item);
            }
            this.forgiveness = _data["Forgiveness"] ? Forgiveness.fromJS(_data["Forgiveness"]) : <any>undefined;
            this.fine = _data["Fine"] ? Fine.fromJS(_data["Fine"]) : <any>undefined;
            this.salary = _data["Salary"] ? SalaryData.fromJS(_data["Salary"]) : <any>undefined;
            this.schedule = _data["Schedule"] ? ScheduleData.fromJS(_data["Schedule"]) : <any>undefined;
            if (Array.isArray(_data["EmployeeHolidays"])) {
                this.employeeHolidays = [] as any;
                for (let item of _data["EmployeeHolidays"])
                    this.employeeHolidays!.push(EmployeeHolidays.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetEmployeeForEdit {
        data = typeof data === 'object' ? data : {};
        let result = new GetEmployeeForEdit();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ID"] = this.iD;
        data["AvatarImage"] = this.avatarImage;
        data["AvatarFormat"] = this.avatarFormat;
        data["Agreement"] = this.agreement;
        data["EmployeeDetailsID"] = this.employeeDetailsID;
        data["FirsName"] = this.firsName;
        data["FirsName_ka"] = this.firsName_ka;
        data["FirsName_ru"] = this.firsName_ru;
        data["LastName"] = this.lastName;
        data["LastName_ka"] = this.lastName_ka;
        data["LastName_ru"] = this.lastName_ru;
        data["Country"] = this.country;
        data["DateOfBirth"] = this.dateOfBirth ? this.dateOfBirth.toISOString() : <any>undefined;
        data["Address"] = this.address;
        data["Address_ka"] = this.address_ka;
        data["Address_ru"] = this.address_ru;
        data["Email"] = this.email;
        data["IsActive"] = this.isActive;
        data["EmployeePositionID"] = this.employeePositionID;
        data["DeviceCardID"] = this.deviceCardID;
        data["SalaryID"] = this.salaryID;
        data["UserIDInDevice"] = this.userIDInDevice;
        data["BranchID"] = this.branchID;
        data["DepartmentID"] = this.departmentID;
        data["GenderID"] = this.genderID;
        data["PersonalNumber"] = this.personalNumber;
        if (Array.isArray(this.mobileNumbers)) {
            data["MobileNumbers"] = [];
            for (let item of this.mobileNumbers)
                data["MobileNumbers"].push(item);
        }
        data["Forgiveness"] = this.forgiveness ? this.forgiveness.toJSON() : <any>undefined;
        data["Fine"] = this.fine ? this.fine.toJSON() : <any>undefined;
        data["Salary"] = this.salary ? this.salary.toJSON() : <any>undefined;
        data["Schedule"] = this.schedule ? this.schedule.toJSON() : <any>undefined;
        if (Array.isArray(this.employeeHolidays)) {
            data["EmployeeHolidays"] = [];
            for (let item of this.employeeHolidays)
                data["EmployeeHolidays"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IGetEmployeeForEdit {
    iD?: number | undefined;
    avatarImage?: string | undefined;
    avatarFormat?: string | undefined;
    agreement?: string | undefined;
    employeeDetailsID?: number | undefined;
    firsName?: string | undefined;
    firsName_ka?: string | undefined;
    firsName_ru?: string | undefined;
    lastName?: string | undefined;
    lastName_ka?: string | undefined;
    lastName_ru?: string | undefined;
    country?: string | undefined;
    dateOfBirth?: Date | undefined;
    address?: string | undefined;
    address_ka?: string | undefined;
    address_ru?: string | undefined;
    email?: string | undefined;
    isActive?: boolean | undefined;
    employeePositionID?: number | undefined;
    deviceCardID?: string | undefined;
    salaryID?: number | undefined;
    userIDInDevice?: number | undefined;
    branchID?: number | undefined;
    departmentID?: number | undefined;
    genderID?: number | undefined;
    personalNumber?: string | undefined;
    mobileNumbers?: string[] | undefined;
    forgiveness?: Forgiveness | undefined;
    fine?: Fine | undefined;
    salary?: SalaryData | undefined;
    schedule?: ScheduleData | undefined;
    employeeHolidays?: EmployeeHolidays[] | undefined;
}

export class IResponseOfEditEmployeeResposeModel implements IIResponseOfEditEmployeeResposeModel {
    ok!: boolean;
    errors?: string[] | undefined;
    data?: EditEmployeeResposeModel | undefined;

    constructor(data?: IIResponseOfEditEmployeeResposeModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ok = _data["Ok"];
            if (Array.isArray(_data["Errors"])) {
                this.errors = [] as any;
                for (let item of _data["Errors"])
                    this.errors!.push(item);
            }
            this.data = _data["Data"] ? EditEmployeeResposeModel.fromJS(_data["Data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): IResponseOfEditEmployeeResposeModel {
        data = typeof data === 'object' ? data : {};
        let result = new IResponseOfEditEmployeeResposeModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Ok"] = this.ok;
        if (Array.isArray(this.errors)) {
            data["Errors"] = [];
            for (let item of this.errors)
                data["Errors"].push(item);
        }
        data["Data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IIResponseOfEditEmployeeResposeModel {
    ok: boolean;
    errors?: string[] | undefined;
    data?: EditEmployeeResposeModel | undefined;
}

export class EditEmployeeResposeModel implements IEditEmployeeResposeModel {

    constructor(data?: IEditEmployeeResposeModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): EditEmployeeResposeModel {
        data = typeof data === 'object' ? data : {};
        let result = new EditEmployeeResposeModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data; 
    }
}

export interface IEditEmployeeResposeModel {
}

export class IResponseOfGetEmployeeForEdit implements IIResponseOfGetEmployeeForEdit {
    ok!: boolean;
    errors?: string[] | undefined;
    data?: GetEmployeeForEdit | undefined;

    constructor(data?: IIResponseOfGetEmployeeForEdit) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ok = _data["Ok"];
            if (Array.isArray(_data["Errors"])) {
                this.errors = [] as any;
                for (let item of _data["Errors"])
                    this.errors!.push(item);
            }
            this.data = _data["Data"] ? GetEmployeeForEdit.fromJS(_data["Data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): IResponseOfGetEmployeeForEdit {
        data = typeof data === 'object' ? data : {};
        let result = new IResponseOfGetEmployeeForEdit();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Ok"] = this.ok;
        if (Array.isArray(this.errors)) {
            data["Errors"] = [];
            for (let item of this.errors)
                data["Errors"].push(item);
        }
        data["Data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IIResponseOfGetEmployeeForEdit {
    ok: boolean;
    errors?: string[] | undefined;
    data?: GetEmployeeForEdit | undefined;
}

export class GetEmployeeHolidayListRequest implements IGetEmployeeHolidayListRequest {
    employeeID?: number | undefined;

    constructor(data?: IGetEmployeeHolidayListRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.employeeID = _data["EmployeeID"];
        }
    }

    static fromJS(data: any): GetEmployeeHolidayListRequest {
        data = typeof data === 'object' ? data : {};
        let result = new GetEmployeeHolidayListRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["EmployeeID"] = this.employeeID;
        return data; 
    }
}

export interface IGetEmployeeHolidayListRequest {
    employeeID?: number | undefined;
}

export class IResponseOfGetEmployeeHolidayListResponse implements IIResponseOfGetEmployeeHolidayListResponse {
    ok!: boolean;
    errors?: string[] | undefined;
    data?: GetEmployeeHolidayListResponse | undefined;

    constructor(data?: IIResponseOfGetEmployeeHolidayListResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ok = _data["Ok"];
            if (Array.isArray(_data["Errors"])) {
                this.errors = [] as any;
                for (let item of _data["Errors"])
                    this.errors!.push(item);
            }
            this.data = _data["Data"] ? GetEmployeeHolidayListResponse.fromJS(_data["Data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): IResponseOfGetEmployeeHolidayListResponse {
        data = typeof data === 'object' ? data : {};
        let result = new IResponseOfGetEmployeeHolidayListResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Ok"] = this.ok;
        if (Array.isArray(this.errors)) {
            data["Errors"] = [];
            for (let item of this.errors)
                data["Errors"].push(item);
        }
        data["Data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IIResponseOfGetEmployeeHolidayListResponse {
    ok: boolean;
    errors?: string[] | undefined;
    data?: GetEmployeeHolidayListResponse | undefined;
}

export class GetEmployeeHolidayListResponse implements IGetEmployeeHolidayListResponse {
    getEmployeeHolidayList?: GetEmployeeHolidayListItem[] | undefined;

    constructor(data?: IGetEmployeeHolidayListResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["GetEmployeeHolidayList"])) {
                this.getEmployeeHolidayList = [] as any;
                for (let item of _data["GetEmployeeHolidayList"])
                    this.getEmployeeHolidayList!.push(GetEmployeeHolidayListItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetEmployeeHolidayListResponse {
        data = typeof data === 'object' ? data : {};
        let result = new GetEmployeeHolidayListResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.getEmployeeHolidayList)) {
            data["GetEmployeeHolidayList"] = [];
            for (let item of this.getEmployeeHolidayList)
                data["GetEmployeeHolidayList"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IGetEmployeeHolidayListResponse {
    getEmployeeHolidayList?: GetEmployeeHolidayListItem[] | undefined;
}

export class GetEmployeeHolidayListItem implements IGetEmployeeHolidayListItem {
    iD?: number | undefined;
    holidayTypeID?: number | undefined;
    allWritten?: number | undefined;
    left?: number | undefined;
    used?: number | undefined;
    numInYear?: number | undefined;
    leftInYear?: number | undefined;
    deactivateDate?: Date | undefined;
    isActive?: boolean | undefined;
    employeeID?: number | undefined;

    constructor(data?: IGetEmployeeHolidayListItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.iD = _data["ID"];
            this.holidayTypeID = _data["HolidayTypeID"];
            this.allWritten = _data["AllWritten"];
            this.left = _data["Left"];
            this.used = _data["Used"];
            this.numInYear = _data["NumInYear"];
            this.leftInYear = _data["LeftInYear"];
            this.deactivateDate = _data["DeactivateDate"] ? new Date(_data["DeactivateDate"].toString()) : <any>undefined;
            this.isActive = _data["IsActive"];
            this.employeeID = _data["EmployeeID"];
        }
    }

    static fromJS(data: any): GetEmployeeHolidayListItem {
        data = typeof data === 'object' ? data : {};
        let result = new GetEmployeeHolidayListItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ID"] = this.iD;
        data["HolidayTypeID"] = this.holidayTypeID;
        data["AllWritten"] = this.allWritten;
        data["Left"] = this.left;
        data["Used"] = this.used;
        data["NumInYear"] = this.numInYear;
        data["LeftInYear"] = this.leftInYear;
        data["DeactivateDate"] = this.deactivateDate ? this.deactivateDate.toISOString() : <any>undefined;
        data["IsActive"] = this.isActive;
        data["EmployeeID"] = this.employeeID;
        return data; 
    }
}

export interface IGetEmployeeHolidayListItem {
    iD?: number | undefined;
    holidayTypeID?: number | undefined;
    allWritten?: number | undefined;
    left?: number | undefined;
    used?: number | undefined;
    numInYear?: number | undefined;
    leftInYear?: number | undefined;
    deactivateDate?: Date | undefined;
    isActive?: boolean | undefined;
    employeeID?: number | undefined;
}

export class IResponseOfGetEmployeeListResponse implements IIResponseOfGetEmployeeListResponse {
    ok!: boolean;
    errors?: string[] | undefined;
    data?: GetEmployeeListResponse | undefined;

    constructor(data?: IIResponseOfGetEmployeeListResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ok = _data["Ok"];
            if (Array.isArray(_data["Errors"])) {
                this.errors = [] as any;
                for (let item of _data["Errors"])
                    this.errors!.push(item);
            }
            this.data = _data["Data"] ? GetEmployeeListResponse.fromJS(_data["Data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): IResponseOfGetEmployeeListResponse {
        data = typeof data === 'object' ? data : {};
        let result = new IResponseOfGetEmployeeListResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Ok"] = this.ok;
        if (Array.isArray(this.errors)) {
            data["Errors"] = [];
            for (let item of this.errors)
                data["Errors"].push(item);
        }
        data["Data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IIResponseOfGetEmployeeListResponse {
    ok: boolean;
    errors?: string[] | undefined;
    data?: GetEmployeeListResponse | undefined;
}

export class GetEmployeeListResponse implements IGetEmployeeListResponse {
    getEmployeeList?: GetEmployeeListItem[] | undefined;

    constructor(data?: IGetEmployeeListResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["GetEmployeeList"])) {
                this.getEmployeeList = [] as any;
                for (let item of _data["GetEmployeeList"])
                    this.getEmployeeList!.push(GetEmployeeListItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetEmployeeListResponse {
        data = typeof data === 'object' ? data : {};
        let result = new GetEmployeeListResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.getEmployeeList)) {
            data["GetEmployeeList"] = [];
            for (let item of this.getEmployeeList)
                data["GetEmployeeList"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IGetEmployeeListResponse {
    getEmployeeList?: GetEmployeeListItem[] | undefined;
}

export class GetEmployeeListItem implements IGetEmployeeListItem {
    iD?: number | undefined;
    firsName?: string | undefined;
    firsName_ka?: string | undefined;
    firsName_ru?: string | undefined;
    lastName?: string | undefined;
    lastName_ka?: string | undefined;
    lastName_ru?: string | undefined;
    country?: string | undefined;
    dateOfBirth?: Date | undefined;
    address?: string | undefined;
    address_ka?: string | undefined;
    address_ru?: string | undefined;
    email?: string | undefined;
    isActive?: boolean | undefined;
    employeePosition?: string | undefined;
    deviceCardID?: string | undefined;
    userIDInDevice?: number | undefined;
    branchName?: string | undefined;
    departmentName?: string | undefined;
    gender?: string | undefined;
    personalNumber?: string | undefined;
    mobileNumbers?: string[] | undefined;
    forgiveness?: number | undefined;
    fine?: number | undefined;
    salary?: number | undefined;

    constructor(data?: IGetEmployeeListItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.iD = _data["ID"];
            this.firsName = _data["FirsName"];
            this.firsName_ka = _data["FirsName_ka"];
            this.firsName_ru = _data["FirsName_ru"];
            this.lastName = _data["LastName"];
            this.lastName_ka = _data["LastName_ka"];
            this.lastName_ru = _data["LastName_ru"];
            this.country = _data["Country"];
            this.dateOfBirth = _data["DateOfBirth"] ? new Date(_data["DateOfBirth"].toString()) : <any>undefined;
            this.address = _data["Address"];
            this.address_ka = _data["Address_ka"];
            this.address_ru = _data["Address_ru"];
            this.email = _data["Email"];
            this.isActive = _data["IsActive"];
            this.employeePosition = _data["EmployeePosition"];
            this.deviceCardID = _data["DeviceCardID"];
            this.userIDInDevice = _data["UserIDInDevice"];
            this.branchName = _data["BranchName"];
            this.departmentName = _data["DepartmentName"];
            this.gender = _data["Gender"];
            this.personalNumber = _data["PersonalNumber"];
            if (Array.isArray(_data["MobileNumbers"])) {
                this.mobileNumbers = [] as any;
                for (let item of _data["MobileNumbers"])
                    this.mobileNumbers!.push(item);
            }
            this.forgiveness = _data["Forgiveness"];
            this.fine = _data["Fine"];
            this.salary = _data["Salary"];
        }
    }

    static fromJS(data: any): GetEmployeeListItem {
        data = typeof data === 'object' ? data : {};
        let result = new GetEmployeeListItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ID"] = this.iD;
        data["FirsName"] = this.firsName;
        data["FirsName_ka"] = this.firsName_ka;
        data["FirsName_ru"] = this.firsName_ru;
        data["LastName"] = this.lastName;
        data["LastName_ka"] = this.lastName_ka;
        data["LastName_ru"] = this.lastName_ru;
        data["Country"] = this.country;
        data["DateOfBirth"] = this.dateOfBirth ? this.dateOfBirth.toISOString() : <any>undefined;
        data["Address"] = this.address;
        data["Address_ka"] = this.address_ka;
        data["Address_ru"] = this.address_ru;
        data["Email"] = this.email;
        data["IsActive"] = this.isActive;
        data["EmployeePosition"] = this.employeePosition;
        data["DeviceCardID"] = this.deviceCardID;
        data["UserIDInDevice"] = this.userIDInDevice;
        data["BranchName"] = this.branchName;
        data["DepartmentName"] = this.departmentName;
        data["Gender"] = this.gender;
        data["PersonalNumber"] = this.personalNumber;
        if (Array.isArray(this.mobileNumbers)) {
            data["MobileNumbers"] = [];
            for (let item of this.mobileNumbers)
                data["MobileNumbers"].push(item);
        }
        data["Forgiveness"] = this.forgiveness;
        data["Fine"] = this.fine;
        data["Salary"] = this.salary;
        return data; 
    }
}

export interface IGetEmployeeListItem {
    iD?: number | undefined;
    firsName?: string | undefined;
    firsName_ka?: string | undefined;
    firsName_ru?: string | undefined;
    lastName?: string | undefined;
    lastName_ka?: string | undefined;
    lastName_ru?: string | undefined;
    country?: string | undefined;
    dateOfBirth?: Date | undefined;
    address?: string | undefined;
    address_ka?: string | undefined;
    address_ru?: string | undefined;
    email?: string | undefined;
    isActive?: boolean | undefined;
    employeePosition?: string | undefined;
    deviceCardID?: string | undefined;
    userIDInDevice?: number | undefined;
    branchName?: string | undefined;
    departmentName?: string | undefined;
    gender?: string | undefined;
    personalNumber?: string | undefined;
    mobileNumbers?: string[] | undefined;
    forgiveness?: number | undefined;
    fine?: number | undefined;
    salary?: number | undefined;
}

export class AddGovernmentRequest implements IAddGovernmentRequest {
    description?: string | undefined;
    holidayDate?: Date | undefined;

    constructor(data?: IAddGovernmentRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.description = _data["Description"];
            this.holidayDate = _data["HolidayDate"] ? new Date(_data["HolidayDate"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): AddGovernmentRequest {
        data = typeof data === 'object' ? data : {};
        let result = new AddGovernmentRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Description"] = this.description;
        data["HolidayDate"] = this.holidayDate ? this.holidayDate.toISOString() : <any>undefined;
        return data; 
    }
}

export interface IAddGovernmentRequest {
    description?: string | undefined;
    holidayDate?: Date | undefined;
}

export class IResponseOfAddGovernmentResponse implements IIResponseOfAddGovernmentResponse {
    ok!: boolean;
    errors?: string[] | undefined;
    data?: AddGovernmentResponse | undefined;

    constructor(data?: IIResponseOfAddGovernmentResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ok = _data["Ok"];
            if (Array.isArray(_data["Errors"])) {
                this.errors = [] as any;
                for (let item of _data["Errors"])
                    this.errors!.push(item);
            }
            this.data = _data["Data"] ? AddGovernmentResponse.fromJS(_data["Data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): IResponseOfAddGovernmentResponse {
        data = typeof data === 'object' ? data : {};
        let result = new IResponseOfAddGovernmentResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Ok"] = this.ok;
        if (Array.isArray(this.errors)) {
            data["Errors"] = [];
            for (let item of this.errors)
                data["Errors"].push(item);
        }
        data["Data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IIResponseOfAddGovernmentResponse {
    ok: boolean;
    errors?: string[] | undefined;
    data?: AddGovernmentResponse | undefined;
}

export class AddGovernmentResponse implements IAddGovernmentResponse {

    constructor(data?: IAddGovernmentResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): AddGovernmentResponse {
        data = typeof data === 'object' ? data : {};
        let result = new AddGovernmentResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data; 
    }
}

export interface IAddGovernmentResponse {
}

export class IResponseOfGetGovernmentHolidayListResponse implements IIResponseOfGetGovernmentHolidayListResponse {
    ok!: boolean;
    errors?: string[] | undefined;
    data?: GetGovernmentHolidayListResponse | undefined;

    constructor(data?: IIResponseOfGetGovernmentHolidayListResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ok = _data["Ok"];
            if (Array.isArray(_data["Errors"])) {
                this.errors = [] as any;
                for (let item of _data["Errors"])
                    this.errors!.push(item);
            }
            this.data = _data["Data"] ? GetGovernmentHolidayListResponse.fromJS(_data["Data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): IResponseOfGetGovernmentHolidayListResponse {
        data = typeof data === 'object' ? data : {};
        let result = new IResponseOfGetGovernmentHolidayListResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Ok"] = this.ok;
        if (Array.isArray(this.errors)) {
            data["Errors"] = [];
            for (let item of this.errors)
                data["Errors"].push(item);
        }
        data["Data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IIResponseOfGetGovernmentHolidayListResponse {
    ok: boolean;
    errors?: string[] | undefined;
    data?: GetGovernmentHolidayListResponse | undefined;
}

export class GetGovernmentHolidayListResponse implements IGetGovernmentHolidayListResponse {
    governmentHolidayList?: GetGovernmentHolidayListItem[] | undefined;

    constructor(data?: IGetGovernmentHolidayListResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["GovernmentHolidayList"])) {
                this.governmentHolidayList = [] as any;
                for (let item of _data["GovernmentHolidayList"])
                    this.governmentHolidayList!.push(GetGovernmentHolidayListItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetGovernmentHolidayListResponse {
        data = typeof data === 'object' ? data : {};
        let result = new GetGovernmentHolidayListResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.governmentHolidayList)) {
            data["GovernmentHolidayList"] = [];
            for (let item of this.governmentHolidayList)
                data["GovernmentHolidayList"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IGetGovernmentHolidayListResponse {
    governmentHolidayList?: GetGovernmentHolidayListItem[] | undefined;
}

export class GetGovernmentHolidayListItem implements IGetGovernmentHolidayListItem {
    iD?: number | undefined;
    description?: string | undefined;
    holidayDate?: Date | undefined;

    constructor(data?: IGetGovernmentHolidayListItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.iD = _data["ID"];
            this.description = _data["Description"];
            this.holidayDate = _data["HolidayDate"] ? new Date(_data["HolidayDate"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): GetGovernmentHolidayListItem {
        data = typeof data === 'object' ? data : {};
        let result = new GetGovernmentHolidayListItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ID"] = this.iD;
        data["Description"] = this.description;
        data["HolidayDate"] = this.holidayDate ? this.holidayDate.toISOString() : <any>undefined;
        return data; 
    }
}

export interface IGetGovernmentHolidayListItem {
    iD?: number | undefined;
    description?: string | undefined;
    holidayDate?: Date | undefined;
}

export class EditGovernmentHolidayRequest implements IEditGovernmentHolidayRequest {
    iD?: number | undefined;
    description?: string | undefined;
    holidayDate?: Date | undefined;

    constructor(data?: IEditGovernmentHolidayRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.iD = _data["ID"];
            this.description = _data["Description"];
            this.holidayDate = _data["HolidayDate"] ? new Date(_data["HolidayDate"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): EditGovernmentHolidayRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EditGovernmentHolidayRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ID"] = this.iD;
        data["Description"] = this.description;
        data["HolidayDate"] = this.holidayDate ? this.holidayDate.toISOString() : <any>undefined;
        return data; 
    }
}

export interface IEditGovernmentHolidayRequest {
    iD?: number | undefined;
    description?: string | undefined;
    holidayDate?: Date | undefined;
}

export class IResponseOfEditGovernmentHolidayResponse implements IIResponseOfEditGovernmentHolidayResponse {
    ok!: boolean;
    errors?: string[] | undefined;
    data?: EditGovernmentHolidayResponse | undefined;

    constructor(data?: IIResponseOfEditGovernmentHolidayResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ok = _data["Ok"];
            if (Array.isArray(_data["Errors"])) {
                this.errors = [] as any;
                for (let item of _data["Errors"])
                    this.errors!.push(item);
            }
            this.data = _data["Data"] ? EditGovernmentHolidayResponse.fromJS(_data["Data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): IResponseOfEditGovernmentHolidayResponse {
        data = typeof data === 'object' ? data : {};
        let result = new IResponseOfEditGovernmentHolidayResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Ok"] = this.ok;
        if (Array.isArray(this.errors)) {
            data["Errors"] = [];
            for (let item of this.errors)
                data["Errors"].push(item);
        }
        data["Data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IIResponseOfEditGovernmentHolidayResponse {
    ok: boolean;
    errors?: string[] | undefined;
    data?: EditGovernmentHolidayResponse | undefined;
}

export class EditGovernmentHolidayResponse implements IEditGovernmentHolidayResponse {

    constructor(data?: IEditGovernmentHolidayResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): EditGovernmentHolidayResponse {
        data = typeof data === 'object' ? data : {};
        let result = new EditGovernmentHolidayResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data; 
    }
}

export interface IEditGovernmentHolidayResponse {
}

export class IResponseOfGetEmployeeHolidayReqListResponse implements IIResponseOfGetEmployeeHolidayReqListResponse {
    ok!: boolean;
    errors?: string[] | undefined;
    data?: GetEmployeeHolidayReqListResponse | undefined;

    constructor(data?: IIResponseOfGetEmployeeHolidayReqListResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ok = _data["Ok"];
            if (Array.isArray(_data["Errors"])) {
                this.errors = [] as any;
                for (let item of _data["Errors"])
                    this.errors!.push(item);
            }
            this.data = _data["Data"] ? GetEmployeeHolidayReqListResponse.fromJS(_data["Data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): IResponseOfGetEmployeeHolidayReqListResponse {
        data = typeof data === 'object' ? data : {};
        let result = new IResponseOfGetEmployeeHolidayReqListResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Ok"] = this.ok;
        if (Array.isArray(this.errors)) {
            data["Errors"] = [];
            for (let item of this.errors)
                data["Errors"].push(item);
        }
        data["Data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IIResponseOfGetEmployeeHolidayReqListResponse {
    ok: boolean;
    errors?: string[] | undefined;
    data?: GetEmployeeHolidayReqListResponse | undefined;
}

export class GetEmployeeHolidayReqListResponse implements IGetEmployeeHolidayReqListResponse {
    getEmployeeHolidayRequestList?: GetEmployeeHolidayReqListItem[] | undefined;

    constructor(data?: IGetEmployeeHolidayReqListResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["GetEmployeeHolidayRequestList"])) {
                this.getEmployeeHolidayRequestList = [] as any;
                for (let item of _data["GetEmployeeHolidayRequestList"])
                    this.getEmployeeHolidayRequestList!.push(GetEmployeeHolidayReqListItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetEmployeeHolidayReqListResponse {
        data = typeof data === 'object' ? data : {};
        let result = new GetEmployeeHolidayReqListResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.getEmployeeHolidayRequestList)) {
            data["GetEmployeeHolidayRequestList"] = [];
            for (let item of this.getEmployeeHolidayRequestList)
                data["GetEmployeeHolidayRequestList"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IGetEmployeeHolidayReqListResponse {
    getEmployeeHolidayRequestList?: GetEmployeeHolidayReqListItem[] | undefined;
}

export class GetEmployeeHolidayReqListItem implements IGetEmployeeHolidayReqListItem {
    iD?: number | undefined;
    registartionDate?: Date | undefined;
    holidayTypeID?: number | undefined;
    fromDate?: Date | undefined;
    toDate?: Date | undefined;
    amountWorkDays?: number | undefined;
    employeeID?: number | undefined;

    constructor(data?: IGetEmployeeHolidayReqListItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.iD = _data["ID"];
            this.registartionDate = _data["RegistartionDate"] ? new Date(_data["RegistartionDate"].toString()) : <any>undefined;
            this.holidayTypeID = _data["HolidayTypeID"];
            this.fromDate = _data["FromDate"] ? new Date(_data["FromDate"].toString()) : <any>undefined;
            this.toDate = _data["ToDate"] ? new Date(_data["ToDate"].toString()) : <any>undefined;
            this.amountWorkDays = _data["AmountWorkDays"];
            this.employeeID = _data["EmployeeID"];
        }
    }

    static fromJS(data: any): GetEmployeeHolidayReqListItem {
        data = typeof data === 'object' ? data : {};
        let result = new GetEmployeeHolidayReqListItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ID"] = this.iD;
        data["RegistartionDate"] = this.registartionDate ? this.registartionDate.toISOString() : <any>undefined;
        data["HolidayTypeID"] = this.holidayTypeID;
        data["FromDate"] = this.fromDate ? this.fromDate.toISOString() : <any>undefined;
        data["ToDate"] = this.toDate ? this.toDate.toISOString() : <any>undefined;
        data["AmountWorkDays"] = this.amountWorkDays;
        data["EmployeeID"] = this.employeeID;
        return data; 
    }
}

export interface IGetEmployeeHolidayReqListItem {
    iD?: number | undefined;
    registartionDate?: Date | undefined;
    holidayTypeID?: number | undefined;
    fromDate?: Date | undefined;
    toDate?: Date | undefined;
    amountWorkDays?: number | undefined;
    employeeID?: number | undefined;
}

export class AddEmployeeHolidayReqRequest implements IAddEmployeeHolidayReqRequest {
    holidayTypeID?: number | undefined;
    fromDate?: Date | undefined;
    toDate?: Date | undefined;
    employeeID?: number | undefined;

    constructor(data?: IAddEmployeeHolidayReqRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.holidayTypeID = _data["HolidayTypeID"];
            this.fromDate = _data["FromDate"] ? new Date(_data["FromDate"].toString()) : <any>undefined;
            this.toDate = _data["ToDate"] ? new Date(_data["ToDate"].toString()) : <any>undefined;
            this.employeeID = _data["EmployeeID"];
        }
    }

    static fromJS(data: any): AddEmployeeHolidayReqRequest {
        data = typeof data === 'object' ? data : {};
        let result = new AddEmployeeHolidayReqRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["HolidayTypeID"] = this.holidayTypeID;
        data["FromDate"] = this.fromDate ? this.fromDate.toISOString() : <any>undefined;
        data["ToDate"] = this.toDate ? this.toDate.toISOString() : <any>undefined;
        data["EmployeeID"] = this.employeeID;
        return data; 
    }
}

export interface IAddEmployeeHolidayReqRequest {
    holidayTypeID?: number | undefined;
    fromDate?: Date | undefined;
    toDate?: Date | undefined;
    employeeID?: number | undefined;
}

export class IResponseOfAddEmployeeHolidayReqResponse implements IIResponseOfAddEmployeeHolidayReqResponse {
    ok!: boolean;
    errors?: string[] | undefined;
    data?: AddEmployeeHolidayReqResponse | undefined;

    constructor(data?: IIResponseOfAddEmployeeHolidayReqResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ok = _data["Ok"];
            if (Array.isArray(_data["Errors"])) {
                this.errors = [] as any;
                for (let item of _data["Errors"])
                    this.errors!.push(item);
            }
            this.data = _data["Data"] ? AddEmployeeHolidayReqResponse.fromJS(_data["Data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): IResponseOfAddEmployeeHolidayReqResponse {
        data = typeof data === 'object' ? data : {};
        let result = new IResponseOfAddEmployeeHolidayReqResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Ok"] = this.ok;
        if (Array.isArray(this.errors)) {
            data["Errors"] = [];
            for (let item of this.errors)
                data["Errors"].push(item);
        }
        data["Data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IIResponseOfAddEmployeeHolidayReqResponse {
    ok: boolean;
    errors?: string[] | undefined;
    data?: AddEmployeeHolidayReqResponse | undefined;
}

export class AddEmployeeHolidayReqResponse implements IAddEmployeeHolidayReqResponse {

    constructor(data?: IAddEmployeeHolidayReqResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): AddEmployeeHolidayReqResponse {
        data = typeof data === 'object' ? data : {};
        let result = new AddEmployeeHolidayReqResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data; 
    }
}

export interface IAddEmployeeHolidayReqResponse {
}

export class EditEmployeeHolidayReqRequest implements IEditEmployeeHolidayReqRequest {
    iD?: number | undefined;
    holidayTypeID?: number | undefined;
    fromDate?: Date | undefined;
    toDate?: Date | undefined;
    employeeID?: number | undefined;

    constructor(data?: IEditEmployeeHolidayReqRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.iD = _data["ID"];
            this.holidayTypeID = _data["HolidayTypeID"];
            this.fromDate = _data["FromDate"] ? new Date(_data["FromDate"].toString()) : <any>undefined;
            this.toDate = _data["ToDate"] ? new Date(_data["ToDate"].toString()) : <any>undefined;
            this.employeeID = _data["EmployeeID"];
        }
    }

    static fromJS(data: any): EditEmployeeHolidayReqRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EditEmployeeHolidayReqRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ID"] = this.iD;
        data["HolidayTypeID"] = this.holidayTypeID;
        data["FromDate"] = this.fromDate ? this.fromDate.toISOString() : <any>undefined;
        data["ToDate"] = this.toDate ? this.toDate.toISOString() : <any>undefined;
        data["EmployeeID"] = this.employeeID;
        return data; 
    }
}

export interface IEditEmployeeHolidayReqRequest {
    iD?: number | undefined;
    holidayTypeID?: number | undefined;
    fromDate?: Date | undefined;
    toDate?: Date | undefined;
    employeeID?: number | undefined;
}

export class IResponseOfEditEmployeeHolidayReqResponse implements IIResponseOfEditEmployeeHolidayReqResponse {
    ok!: boolean;
    errors?: string[] | undefined;
    data?: EditEmployeeHolidayReqResponse | undefined;

    constructor(data?: IIResponseOfEditEmployeeHolidayReqResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ok = _data["Ok"];
            if (Array.isArray(_data["Errors"])) {
                this.errors = [] as any;
                for (let item of _data["Errors"])
                    this.errors!.push(item);
            }
            this.data = _data["Data"] ? EditEmployeeHolidayReqResponse.fromJS(_data["Data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): IResponseOfEditEmployeeHolidayReqResponse {
        data = typeof data === 'object' ? data : {};
        let result = new IResponseOfEditEmployeeHolidayReqResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Ok"] = this.ok;
        if (Array.isArray(this.errors)) {
            data["Errors"] = [];
            for (let item of this.errors)
                data["Errors"].push(item);
        }
        data["Data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IIResponseOfEditEmployeeHolidayReqResponse {
    ok: boolean;
    errors?: string[] | undefined;
    data?: EditEmployeeHolidayReqResponse | undefined;
}

export class EditEmployeeHolidayReqResponse implements IEditEmployeeHolidayReqResponse {

    constructor(data?: IEditEmployeeHolidayReqResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): EditEmployeeHolidayReqResponse {
        data = typeof data === 'object' ? data : {};
        let result = new EditEmployeeHolidayReqResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data; 
    }
}

export interface IEditEmployeeHolidayReqResponse {
}

export class IResponseOfListOfGetEmployeeModReportResponse implements IIResponseOfListOfGetEmployeeModReportResponse {
    ok!: boolean;
    errors?: string[] | undefined;
    data?: GetEmployeeModReportResponse[] | undefined;

    constructor(data?: IIResponseOfListOfGetEmployeeModReportResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ok = _data["Ok"];
            if (Array.isArray(_data["Errors"])) {
                this.errors = [] as any;
                for (let item of _data["Errors"])
                    this.errors!.push(item);
            }
            if (Array.isArray(_data["Data"])) {
                this.data = [] as any;
                for (let item of _data["Data"])
                    this.data!.push(GetEmployeeModReportResponse.fromJS(item));
            }
        }
    }

    static fromJS(data: any): IResponseOfListOfGetEmployeeModReportResponse {
        data = typeof data === 'object' ? data : {};
        let result = new IResponseOfListOfGetEmployeeModReportResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Ok"] = this.ok;
        if (Array.isArray(this.errors)) {
            data["Errors"] = [];
            for (let item of this.errors)
                data["Errors"].push(item);
        }
        if (Array.isArray(this.data)) {
            data["Data"] = [];
            for (let item of this.data)
                data["Data"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IIResponseOfListOfGetEmployeeModReportResponse {
    ok: boolean;
    errors?: string[] | undefined;
    data?: GetEmployeeModReportResponse[] | undefined;
}

export class GetEmployeeModReportResponse implements IGetEmployeeModReportResponse {
    workingLog?: GetEmployeeModReportItems[] | undefined;
    employeeFullname?: string | undefined;
    personalNumber?: string | undefined;
    position?: string | undefined;
    sumFirstHalf?: number | undefined;
    sumSecondHalf?: number | undefined;
    sumHouresInMonth?: number | undefined;
    sumDaysInMonth?: number | undefined;
    sumNightHoures?: number | undefined;
    sumHolidaysWithoutCompensate?: number | undefined;
    sumGovermentHolidays?: number | undefined;
    workedHouresInGovermentHolidays?: number | undefined;
    sumHolidayes?: number | undefined;
    overTime?: number | undefined;
    nightHoures?: number | undefined;

    constructor(data?: IGetEmployeeModReportResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["WorkingLog"])) {
                this.workingLog = [] as any;
                for (let item of _data["WorkingLog"])
                    this.workingLog!.push(GetEmployeeModReportItems.fromJS(item));
            }
            this.employeeFullname = _data["EmployeeFullname"];
            this.personalNumber = _data["PersonalNumber"];
            this.position = _data["Position"];
            this.sumFirstHalf = _data["SumFirstHalf"];
            this.sumSecondHalf = _data["SumSecondHalf"];
            this.sumHouresInMonth = _data["SumHouresInMonth"];
            this.sumDaysInMonth = _data["SumDaysInMonth"];
            this.sumNightHoures = _data["SumNightHoures"];
            this.sumHolidaysWithoutCompensate = _data["SumHolidaysWithoutCompensate"];
            this.sumGovermentHolidays = _data["SumGovermentHolidays"];
            this.workedHouresInGovermentHolidays = _data["WorkedHouresInGovermentHolidays"];
            this.sumHolidayes = _data["SumHolidayes"];
            this.overTime = _data["OverTime"];
            this.nightHoures = _data["NightHoures"];
        }
    }

    static fromJS(data: any): GetEmployeeModReportResponse {
        data = typeof data === 'object' ? data : {};
        let result = new GetEmployeeModReportResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.workingLog)) {
            data["WorkingLog"] = [];
            for (let item of this.workingLog)
                data["WorkingLog"].push(item.toJSON());
        }
        data["EmployeeFullname"] = this.employeeFullname;
        data["PersonalNumber"] = this.personalNumber;
        data["Position"] = this.position;
        data["SumFirstHalf"] = this.sumFirstHalf;
        data["SumSecondHalf"] = this.sumSecondHalf;
        data["SumHouresInMonth"] = this.sumHouresInMonth;
        data["SumDaysInMonth"] = this.sumDaysInMonth;
        data["SumNightHoures"] = this.sumNightHoures;
        data["SumHolidaysWithoutCompensate"] = this.sumHolidaysWithoutCompensate;
        data["SumGovermentHolidays"] = this.sumGovermentHolidays;
        data["WorkedHouresInGovermentHolidays"] = this.workedHouresInGovermentHolidays;
        data["SumHolidayes"] = this.sumHolidayes;
        data["OverTime"] = this.overTime;
        data["NightHoures"] = this.nightHoures;
        return data; 
    }
}

export interface IGetEmployeeModReportResponse {
    workingLog?: GetEmployeeModReportItems[] | undefined;
    employeeFullname?: string | undefined;
    personalNumber?: string | undefined;
    position?: string | undefined;
    sumFirstHalf?: number | undefined;
    sumSecondHalf?: number | undefined;
    sumHouresInMonth?: number | undefined;
    sumDaysInMonth?: number | undefined;
    sumNightHoures?: number | undefined;
    sumHolidaysWithoutCompensate?: number | undefined;
    sumGovermentHolidays?: number | undefined;
    workedHouresInGovermentHolidays?: number | undefined;
    sumHolidayes?: number | undefined;
    overTime?: number | undefined;
    nightHoures?: number | undefined;
}

export class GetEmployeeModReportItems implements IGetEmployeeModReportItems {
    date?: Date | undefined;
    workedTime?: number | undefined;
    workedTimeHoures?: string | undefined;

    constructor(data?: IGetEmployeeModReportItems) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.date = _data["Date"] ? new Date(_data["Date"].toString()) : <any>undefined;
            this.workedTime = _data["WorkedTime"];
            this.workedTimeHoures = _data["WorkedTimeHoures"];
        }
    }

    static fromJS(data: any): GetEmployeeModReportItems {
        data = typeof data === 'object' ? data : {};
        let result = new GetEmployeeModReportItems();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["WorkedTime"] = this.workedTime;
        data["WorkedTimeHoures"] = this.workedTimeHoures;
        return data; 
    }
}

export interface IGetEmployeeModReportItems {
    date?: Date | undefined;
    workedTime?: number | undefined;
    workedTimeHoures?: string | undefined;
}

export class IResponseOfGetEmployeeFullReportResponse implements IIResponseOfGetEmployeeFullReportResponse {
    ok!: boolean;
    errors?: string[] | undefined;
    data?: GetEmployeeFullReportResponse | undefined;

    constructor(data?: IIResponseOfGetEmployeeFullReportResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ok = _data["Ok"];
            if (Array.isArray(_data["Errors"])) {
                this.errors = [] as any;
                for (let item of _data["Errors"])
                    this.errors!.push(item);
            }
            this.data = _data["Data"] ? GetEmployeeFullReportResponse.fromJS(_data["Data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): IResponseOfGetEmployeeFullReportResponse {
        data = typeof data === 'object' ? data : {};
        let result = new IResponseOfGetEmployeeFullReportResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Ok"] = this.ok;
        if (Array.isArray(this.errors)) {
            data["Errors"] = [];
            for (let item of this.errors)
                data["Errors"].push(item);
        }
        data["Data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IIResponseOfGetEmployeeFullReportResponse {
    ok: boolean;
    errors?: string[] | undefined;
    data?: GetEmployeeFullReportResponse | undefined;
}

export class GetEmployeeFullReportResponse implements IGetEmployeeFullReportResponse {
    getEmployeeFullReportItems?: GetEmployeeFullReportItem[] | undefined;

    constructor(data?: IGetEmployeeFullReportResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["GetEmployeeFullReportItems"])) {
                this.getEmployeeFullReportItems = [] as any;
                for (let item of _data["GetEmployeeFullReportItems"])
                    this.getEmployeeFullReportItems!.push(GetEmployeeFullReportItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetEmployeeFullReportResponse {
        data = typeof data === 'object' ? data : {};
        let result = new GetEmployeeFullReportResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.getEmployeeFullReportItems)) {
            data["GetEmployeeFullReportItems"] = [];
            for (let item of this.getEmployeeFullReportItems)
                data["GetEmployeeFullReportItems"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IGetEmployeeFullReportResponse {
    getEmployeeFullReportItems?: GetEmployeeFullReportItem[] | undefined;
}

export class GetEmployeeFullReportItem implements IGetEmployeeFullReportItem {
    employeeID?: number | undefined;
    fullName?: string | undefined;
    department?: string | undefined;
    serviceCenter?: string | undefined;
    sumLateMinutes?: number | undefined;
    sumLateCheckInCount?: number | undefined;
    sumEarlyMinutes?: number | undefined;
    sumEarlyCheckOut?: number | undefined;
    sumLateCheckOut?: number | undefined;
    sumWorkedHoures?: number | undefined;
    sumEarlyCheckOutCount?: number | undefined;
    sumEarlyCheckInCount?: number | undefined;
    sumWorkedInSchedule?: number | undefined;
    sumWorkedOutOfSchedule?: number | undefined;
    sumMissedDays?: number | undefined;
    salaryAmount?: number | undefined;
    fineAmount?: number | undefined;
    salaryAfterFine?: number | undefined;
    indRegID?: number | undefined;
    employeeWorkingLogs?: EmployeeWorkingLogItems[] | undefined;
    employeeWorkingLogWeekHoures?: EmployeeWorkingLogWeekHouresItems[] | undefined;

    constructor(data?: IGetEmployeeFullReportItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.employeeID = _data["EmployeeID"];
            this.fullName = _data["FullName"];
            this.department = _data["Department"];
            this.serviceCenter = _data["ServiceCenter"];
            this.sumLateMinutes = _data["SumLateMinutes"];
            this.sumLateCheckInCount = _data["SumLateCheckInCount"];
            this.sumEarlyMinutes = _data["SumEarlyMinutes"];
            this.sumEarlyCheckOut = _data["SumEarlyCheckOut"];
            this.sumLateCheckOut = _data["SumLateCheckOut"];
            this.sumWorkedHoures = _data["SumWorkedHoures"];
            this.sumEarlyCheckOutCount = _data["SumEarlyCheckOutCount"];
            this.sumEarlyCheckInCount = _data["SumEarlyCheckInCount"];
            this.sumWorkedInSchedule = _data["SumWorkedInSchedule"];
            this.sumWorkedOutOfSchedule = _data["SumWorkedOutOfSchedule"];
            this.sumMissedDays = _data["SumMissedDays"];
            this.salaryAmount = _data["SalaryAmount"];
            this.fineAmount = _data["FineAmount"];
            this.salaryAfterFine = _data["SalaryAfterFine"];
            this.indRegID = _data["IndRegID"];
            if (Array.isArray(_data["EmployeeWorkingLogs"])) {
                this.employeeWorkingLogs = [] as any;
                for (let item of _data["EmployeeWorkingLogs"])
                    this.employeeWorkingLogs!.push(EmployeeWorkingLogItems.fromJS(item));
            }
            if (Array.isArray(_data["EmployeeWorkingLogWeekHoures"])) {
                this.employeeWorkingLogWeekHoures = [] as any;
                for (let item of _data["EmployeeWorkingLogWeekHoures"])
                    this.employeeWorkingLogWeekHoures!.push(EmployeeWorkingLogWeekHouresItems.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetEmployeeFullReportItem {
        data = typeof data === 'object' ? data : {};
        let result = new GetEmployeeFullReportItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["EmployeeID"] = this.employeeID;
        data["FullName"] = this.fullName;
        data["Department"] = this.department;
        data["ServiceCenter"] = this.serviceCenter;
        data["SumLateMinutes"] = this.sumLateMinutes;
        data["SumLateCheckInCount"] = this.sumLateCheckInCount;
        data["SumEarlyMinutes"] = this.sumEarlyMinutes;
        data["SumEarlyCheckOut"] = this.sumEarlyCheckOut;
        data["SumLateCheckOut"] = this.sumLateCheckOut;
        data["SumWorkedHoures"] = this.sumWorkedHoures;
        data["SumEarlyCheckOutCount"] = this.sumEarlyCheckOutCount;
        data["SumEarlyCheckInCount"] = this.sumEarlyCheckInCount;
        data["SumWorkedInSchedule"] = this.sumWorkedInSchedule;
        data["SumWorkedOutOfSchedule"] = this.sumWorkedOutOfSchedule;
        data["SumMissedDays"] = this.sumMissedDays;
        data["SalaryAmount"] = this.salaryAmount;
        data["FineAmount"] = this.fineAmount;
        data["SalaryAfterFine"] = this.salaryAfterFine;
        data["IndRegID"] = this.indRegID;
        if (Array.isArray(this.employeeWorkingLogs)) {
            data["EmployeeWorkingLogs"] = [];
            for (let item of this.employeeWorkingLogs)
                data["EmployeeWorkingLogs"].push(item.toJSON());
        }
        if (Array.isArray(this.employeeWorkingLogWeekHoures)) {
            data["EmployeeWorkingLogWeekHoures"] = [];
            for (let item of this.employeeWorkingLogWeekHoures)
                data["EmployeeWorkingLogWeekHoures"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IGetEmployeeFullReportItem {
    employeeID?: number | undefined;
    fullName?: string | undefined;
    department?: string | undefined;
    serviceCenter?: string | undefined;
    sumLateMinutes?: number | undefined;
    sumLateCheckInCount?: number | undefined;
    sumEarlyMinutes?: number | undefined;
    sumEarlyCheckOut?: number | undefined;
    sumLateCheckOut?: number | undefined;
    sumWorkedHoures?: number | undefined;
    sumEarlyCheckOutCount?: number | undefined;
    sumEarlyCheckInCount?: number | undefined;
    sumWorkedInSchedule?: number | undefined;
    sumWorkedOutOfSchedule?: number | undefined;
    sumMissedDays?: number | undefined;
    salaryAmount?: number | undefined;
    fineAmount?: number | undefined;
    salaryAfterFine?: number | undefined;
    indRegID?: number | undefined;
    employeeWorkingLogs?: EmployeeWorkingLogItems[] | undefined;
    employeeWorkingLogWeekHoures?: EmployeeWorkingLogWeekHouresItems[] | undefined;
}

export class EmployeeWorkingLogItems implements IEmployeeWorkingLogItems {
    scheduleFromTime?: Date | undefined;
    scheduleToTime?: Date | undefined;
    isWorkingDay?: boolean | undefined;
    checkInTime?: Date | undefined;
    checkOutTime?: Date | undefined;
    lateCheckInMinutes?: number | undefined;
    earlyCheckInMinutes?: number | undefined;
    earlyCheckOutMinutes?: number | undefined;
    lateCheckOutMinutes?: number | undefined;
    workStatus?: string | undefined;
    workedMinutess?: number | undefined;
    fineMinutes?: number | undefined;
    workedInSchedule?: number | undefined;
    workedOutSchedule?: number | undefined;
    missedMinutes?: number | undefined;

    constructor(data?: IEmployeeWorkingLogItems) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.scheduleFromTime = _data["ScheduleFromTime"] ? new Date(_data["ScheduleFromTime"].toString()) : <any>undefined;
            this.scheduleToTime = _data["ScheduleToTime"] ? new Date(_data["ScheduleToTime"].toString()) : <any>undefined;
            this.isWorkingDay = _data["IsWorkingDay"];
            this.checkInTime = _data["CheckInTime"] ? new Date(_data["CheckInTime"].toString()) : <any>undefined;
            this.checkOutTime = _data["CheckOutTime"] ? new Date(_data["CheckOutTime"].toString()) : <any>undefined;
            this.lateCheckInMinutes = _data["LateCheckInMinutes"];
            this.earlyCheckInMinutes = _data["EarlyCheckInMinutes"];
            this.earlyCheckOutMinutes = _data["EarlyCheckOutMinutes"];
            this.lateCheckOutMinutes = _data["LateCheckOutMinutes"];
            this.workStatus = _data["WorkStatus"];
            this.workedMinutess = _data["WorkedMinutess"];
            this.fineMinutes = _data["FineMinutes"];
            this.workedInSchedule = _data["WorkedInSchedule"];
            this.workedOutSchedule = _data["WorkedOutSchedule"];
            this.missedMinutes = _data["MissedMinutes"];
        }
    }

    static fromJS(data: any): EmployeeWorkingLogItems {
        data = typeof data === 'object' ? data : {};
        let result = new EmployeeWorkingLogItems();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ScheduleFromTime"] = this.scheduleFromTime ? this.scheduleFromTime.toISOString() : <any>undefined;
        data["ScheduleToTime"] = this.scheduleToTime ? this.scheduleToTime.toISOString() : <any>undefined;
        data["IsWorkingDay"] = this.isWorkingDay;
        data["CheckInTime"] = this.checkInTime ? this.checkInTime.toISOString() : <any>undefined;
        data["CheckOutTime"] = this.checkOutTime ? this.checkOutTime.toISOString() : <any>undefined;
        data["LateCheckInMinutes"] = this.lateCheckInMinutes;
        data["EarlyCheckInMinutes"] = this.earlyCheckInMinutes;
        data["EarlyCheckOutMinutes"] = this.earlyCheckOutMinutes;
        data["LateCheckOutMinutes"] = this.lateCheckOutMinutes;
        data["WorkStatus"] = this.workStatus;
        data["WorkedMinutess"] = this.workedMinutess;
        data["FineMinutes"] = this.fineMinutes;
        data["WorkedInSchedule"] = this.workedInSchedule;
        data["WorkedOutSchedule"] = this.workedOutSchedule;
        data["MissedMinutes"] = this.missedMinutes;
        return data; 
    }
}

export interface IEmployeeWorkingLogItems {
    scheduleFromTime?: Date | undefined;
    scheduleToTime?: Date | undefined;
    isWorkingDay?: boolean | undefined;
    checkInTime?: Date | undefined;
    checkOutTime?: Date | undefined;
    lateCheckInMinutes?: number | undefined;
    earlyCheckInMinutes?: number | undefined;
    earlyCheckOutMinutes?: number | undefined;
    lateCheckOutMinutes?: number | undefined;
    workStatus?: string | undefined;
    workedMinutess?: number | undefined;
    fineMinutes?: number | undefined;
    workedInSchedule?: number | undefined;
    workedOutSchedule?: number | undefined;
    missedMinutes?: number | undefined;
}

export class EmployeeWorkingLogWeekHouresItems implements IEmployeeWorkingLogWeekHouresItems {
    fromDate?: Date | undefined;
    toDate?: Date | undefined;
    workedMinutesSum?: number | undefined;
    workedMinutesOvertime?: number | undefined;
    missedMinutes?: number | undefined;

    constructor(data?: IEmployeeWorkingLogWeekHouresItems) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.fromDate = _data["FromDate"] ? new Date(_data["FromDate"].toString()) : <any>undefined;
            this.toDate = _data["ToDate"] ? new Date(_data["ToDate"].toString()) : <any>undefined;
            this.workedMinutesSum = _data["WorkedMinutesSum"];
            this.workedMinutesOvertime = _data["WorkedMinutesOvertime"];
            this.missedMinutes = _data["MissedMinutes"];
        }
    }

    static fromJS(data: any): EmployeeWorkingLogWeekHouresItems {
        data = typeof data === 'object' ? data : {};
        let result = new EmployeeWorkingLogWeekHouresItems();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["FromDate"] = this.fromDate ? this.fromDate.toISOString() : <any>undefined;
        data["ToDate"] = this.toDate ? this.toDate.toISOString() : <any>undefined;
        data["WorkedMinutesSum"] = this.workedMinutesSum;
        data["WorkedMinutesOvertime"] = this.workedMinutesOvertime;
        data["MissedMinutes"] = this.missedMinutes;
        return data; 
    }
}

export interface IEmployeeWorkingLogWeekHouresItems {
    fromDate?: Date | undefined;
    toDate?: Date | undefined;
    workedMinutesSum?: number | undefined;
    workedMinutesOvertime?: number | undefined;
    missedMinutes?: number | undefined;
}

export class IResponseOfGetGenderListResponse implements IIResponseOfGetGenderListResponse {
    ok!: boolean;
    errors?: string[] | undefined;
    data?: GetGenderListResponse | undefined;

    constructor(data?: IIResponseOfGetGenderListResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ok = _data["Ok"];
            if (Array.isArray(_data["Errors"])) {
                this.errors = [] as any;
                for (let item of _data["Errors"])
                    this.errors!.push(item);
            }
            this.data = _data["Data"] ? GetGenderListResponse.fromJS(_data["Data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): IResponseOfGetGenderListResponse {
        data = typeof data === 'object' ? data : {};
        let result = new IResponseOfGetGenderListResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Ok"] = this.ok;
        if (Array.isArray(this.errors)) {
            data["Errors"] = [];
            for (let item of this.errors)
                data["Errors"].push(item);
        }
        data["Data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IIResponseOfGetGenderListResponse {
    ok: boolean;
    errors?: string[] | undefined;
    data?: GetGenderListResponse | undefined;
}

export class GetGenderListResponse implements IGetGenderListResponse {
    genderList?: GetGenderListItem[] | undefined;

    constructor(data?: IGetGenderListResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["GenderList"])) {
                this.genderList = [] as any;
                for (let item of _data["GenderList"])
                    this.genderList!.push(GetGenderListItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetGenderListResponse {
        data = typeof data === 'object' ? data : {};
        let result = new GetGenderListResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.genderList)) {
            data["GenderList"] = [];
            for (let item of this.genderList)
                data["GenderList"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IGetGenderListResponse {
    genderList?: GetGenderListItem[] | undefined;
}

export class GetGenderListItem implements IGetGenderListItem {
    iD?: number | undefined;
    description?: string | undefined;

    constructor(data?: IGetGenderListItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.iD = _data["ID"];
            this.description = _data["Description"];
        }
    }

    static fromJS(data: any): GetGenderListItem {
        data = typeof data === 'object' ? data : {};
        let result = new GetGenderListItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ID"] = this.iD;
        data["Description"] = this.description;
        return data; 
    }
}

export interface IGetGenderListItem {
    iD?: number | undefined;
    description?: string | undefined;
}

export class IResponseOfGetDepartmentsListResponse implements IIResponseOfGetDepartmentsListResponse {
    ok!: boolean;
    errors?: string[] | undefined;
    data?: GetDepartmentsListResponse | undefined;

    constructor(data?: IIResponseOfGetDepartmentsListResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ok = _data["Ok"];
            if (Array.isArray(_data["Errors"])) {
                this.errors = [] as any;
                for (let item of _data["Errors"])
                    this.errors!.push(item);
            }
            this.data = _data["Data"] ? GetDepartmentsListResponse.fromJS(_data["Data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): IResponseOfGetDepartmentsListResponse {
        data = typeof data === 'object' ? data : {};
        let result = new IResponseOfGetDepartmentsListResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Ok"] = this.ok;
        if (Array.isArray(this.errors)) {
            data["Errors"] = [];
            for (let item of this.errors)
                data["Errors"].push(item);
        }
        data["Data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IIResponseOfGetDepartmentsListResponse {
    ok: boolean;
    errors?: string[] | undefined;
    data?: GetDepartmentsListResponse | undefined;
}

export class GetDepartmentsListResponse implements IGetDepartmentsListResponse {
    departmentsList?: GetDepartmentsListItem[] | undefined;

    constructor(data?: IGetDepartmentsListResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["DepartmentsList"])) {
                this.departmentsList = [] as any;
                for (let item of _data["DepartmentsList"])
                    this.departmentsList!.push(GetDepartmentsListItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetDepartmentsListResponse {
        data = typeof data === 'object' ? data : {};
        let result = new GetDepartmentsListResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.departmentsList)) {
            data["DepartmentsList"] = [];
            for (let item of this.departmentsList)
                data["DepartmentsList"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IGetDepartmentsListResponse {
    departmentsList?: GetDepartmentsListItem[] | undefined;
}

export class GetDepartmentsListItem implements IGetDepartmentsListItem {
    iD?: number | undefined;
    description?: string | undefined;
    parentDescription?: string | undefined;
    isActive?: boolean | undefined;
    parentID?: number | undefined;

    constructor(data?: IGetDepartmentsListItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.iD = _data["ID"];
            this.description = _data["Description"];
            this.parentDescription = _data["ParentDescription"];
            this.isActive = _data["IsActive"];
            this.parentID = _data["ParentID"];
        }
    }

    static fromJS(data: any): GetDepartmentsListItem {
        data = typeof data === 'object' ? data : {};
        let result = new GetDepartmentsListItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ID"] = this.iD;
        data["Description"] = this.description;
        data["ParentDescription"] = this.parentDescription;
        data["IsActive"] = this.isActive;
        data["ParentID"] = this.parentID;
        return data; 
    }
}

export interface IGetDepartmentsListItem {
    iD?: number | undefined;
    description?: string | undefined;
    parentDescription?: string | undefined;
    isActive?: boolean | undefined;
    parentID?: number | undefined;
}

export class AddDepartmentRequest implements IAddDepartmentRequest {
    parentDepartmentID?: number | undefined;
    description?: string | undefined;

    constructor(data?: IAddDepartmentRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.parentDepartmentID = _data["ParentDepartmentID"];
            this.description = _data["Description"];
        }
    }

    static fromJS(data: any): AddDepartmentRequest {
        data = typeof data === 'object' ? data : {};
        let result = new AddDepartmentRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ParentDepartmentID"] = this.parentDepartmentID;
        data["Description"] = this.description;
        return data; 
    }
}

export interface IAddDepartmentRequest {
    parentDepartmentID?: number | undefined;
    description?: string | undefined;
}

export class IResponseOfAddDepartmentResponse implements IIResponseOfAddDepartmentResponse {
    ok!: boolean;
    errors?: string[] | undefined;
    data?: AddDepartmentResponse | undefined;

    constructor(data?: IIResponseOfAddDepartmentResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ok = _data["Ok"];
            if (Array.isArray(_data["Errors"])) {
                this.errors = [] as any;
                for (let item of _data["Errors"])
                    this.errors!.push(item);
            }
            this.data = _data["Data"] ? AddDepartmentResponse.fromJS(_data["Data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): IResponseOfAddDepartmentResponse {
        data = typeof data === 'object' ? data : {};
        let result = new IResponseOfAddDepartmentResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Ok"] = this.ok;
        if (Array.isArray(this.errors)) {
            data["Errors"] = [];
            for (let item of this.errors)
                data["Errors"].push(item);
        }
        data["Data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IIResponseOfAddDepartmentResponse {
    ok: boolean;
    errors?: string[] | undefined;
    data?: AddDepartmentResponse | undefined;
}

export class AddDepartmentResponse implements IAddDepartmentResponse {

    constructor(data?: IAddDepartmentResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): AddDepartmentResponse {
        data = typeof data === 'object' ? data : {};
        let result = new AddDepartmentResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data; 
    }
}

export interface IAddDepartmentResponse {
}

export class EditDepartmentRequest implements IEditDepartmentRequest {
    iD?: number | undefined;
    description?: string | undefined;
    parentDepartmentID?: number | undefined;

    constructor(data?: IEditDepartmentRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.iD = _data["ID"];
            this.description = _data["Description"];
            this.parentDepartmentID = _data["ParentDepartmentID"];
        }
    }

    static fromJS(data: any): EditDepartmentRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EditDepartmentRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ID"] = this.iD;
        data["Description"] = this.description;
        data["ParentDepartmentID"] = this.parentDepartmentID;
        return data; 
    }
}

export interface IEditDepartmentRequest {
    iD?: number | undefined;
    description?: string | undefined;
    parentDepartmentID?: number | undefined;
}

export class IResponseOfEditDeparmentResponse implements IIResponseOfEditDeparmentResponse {
    ok!: boolean;
    errors?: string[] | undefined;
    data?: EditDeparmentResponse | undefined;

    constructor(data?: IIResponseOfEditDeparmentResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ok = _data["Ok"];
            if (Array.isArray(_data["Errors"])) {
                this.errors = [] as any;
                for (let item of _data["Errors"])
                    this.errors!.push(item);
            }
            this.data = _data["Data"] ? EditDeparmentResponse.fromJS(_data["Data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): IResponseOfEditDeparmentResponse {
        data = typeof data === 'object' ? data : {};
        let result = new IResponseOfEditDeparmentResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Ok"] = this.ok;
        if (Array.isArray(this.errors)) {
            data["Errors"] = [];
            for (let item of this.errors)
                data["Errors"].push(item);
        }
        data["Data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IIResponseOfEditDeparmentResponse {
    ok: boolean;
    errors?: string[] | undefined;
    data?: EditDeparmentResponse | undefined;
}

export class EditDeparmentResponse implements IEditDeparmentResponse {

    constructor(data?: IEditDeparmentResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): EditDeparmentResponse {
        data = typeof data === 'object' ? data : {};
        let result = new EditDeparmentResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data; 
    }
}

export interface IEditDeparmentResponse {
}

export class IResponseOfGetBranchListResponse implements IIResponseOfGetBranchListResponse {
    ok!: boolean;
    errors?: string[] | undefined;
    data?: GetBranchListResponse | undefined;

    constructor(data?: IIResponseOfGetBranchListResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ok = _data["Ok"];
            if (Array.isArray(_data["Errors"])) {
                this.errors = [] as any;
                for (let item of _data["Errors"])
                    this.errors!.push(item);
            }
            this.data = _data["Data"] ? GetBranchListResponse.fromJS(_data["Data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): IResponseOfGetBranchListResponse {
        data = typeof data === 'object' ? data : {};
        let result = new IResponseOfGetBranchListResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Ok"] = this.ok;
        if (Array.isArray(this.errors)) {
            data["Errors"] = [];
            for (let item of this.errors)
                data["Errors"].push(item);
        }
        data["Data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IIResponseOfGetBranchListResponse {
    ok: boolean;
    errors?: string[] | undefined;
    data?: GetBranchListResponse | undefined;
}

export class GetBranchListResponse implements IGetBranchListResponse {
    branchList?: GetBranchListItem[] | undefined;

    constructor(data?: IGetBranchListResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["BranchList"])) {
                this.branchList = [] as any;
                for (let item of _data["BranchList"])
                    this.branchList!.push(GetBranchListItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetBranchListResponse {
        data = typeof data === 'object' ? data : {};
        let result = new GetBranchListResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.branchList)) {
            data["BranchList"] = [];
            for (let item of this.branchList)
                data["BranchList"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IGetBranchListResponse {
    branchList?: GetBranchListItem[] | undefined;
}

export class GetBranchListItem implements IGetBranchListItem {
    iD?: number | undefined;
    description?: string | undefined;
    country?: string | undefined;
    countryID?: number | undefined;
    city?: string | undefined;
    cityID?: number | undefined;
    address?: string | undefined;
    isActive?: boolean | undefined;

    constructor(data?: IGetBranchListItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.iD = _data["ID"];
            this.description = _data["Description"];
            this.country = _data["Country"];
            this.countryID = _data["CountryID"];
            this.city = _data["City"];
            this.cityID = _data["CityID"];
            this.address = _data["Address"];
            this.isActive = _data["IsActive"];
        }
    }

    static fromJS(data: any): GetBranchListItem {
        data = typeof data === 'object' ? data : {};
        let result = new GetBranchListItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ID"] = this.iD;
        data["Description"] = this.description;
        data["Country"] = this.country;
        data["CountryID"] = this.countryID;
        data["City"] = this.city;
        data["CityID"] = this.cityID;
        data["Address"] = this.address;
        data["IsActive"] = this.isActive;
        return data; 
    }
}

export interface IGetBranchListItem {
    iD?: number | undefined;
    description?: string | undefined;
    country?: string | undefined;
    countryID?: number | undefined;
    city?: string | undefined;
    cityID?: number | undefined;
    address?: string | undefined;
    isActive?: boolean | undefined;
}

export class IResponseOfGetBranchListItem implements IIResponseOfGetBranchListItem {
    ok!: boolean;
    errors?: string[] | undefined;
    data?: GetBranchListItem | undefined;

    constructor(data?: IIResponseOfGetBranchListItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ok = _data["Ok"];
            if (Array.isArray(_data["Errors"])) {
                this.errors = [] as any;
                for (let item of _data["Errors"])
                    this.errors!.push(item);
            }
            this.data = _data["Data"] ? GetBranchListItem.fromJS(_data["Data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): IResponseOfGetBranchListItem {
        data = typeof data === 'object' ? data : {};
        let result = new IResponseOfGetBranchListItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Ok"] = this.ok;
        if (Array.isArray(this.errors)) {
            data["Errors"] = [];
            for (let item of this.errors)
                data["Errors"].push(item);
        }
        data["Data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IIResponseOfGetBranchListItem {
    ok: boolean;
    errors?: string[] | undefined;
    data?: GetBranchListItem | undefined;
}

export class IResponseOfGetScheduleGeneratorResponse implements IIResponseOfGetScheduleGeneratorResponse {
    ok!: boolean;
    errors?: string[] | undefined;
    data?: GetScheduleGeneratorResponse | undefined;

    constructor(data?: IIResponseOfGetScheduleGeneratorResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ok = _data["Ok"];
            if (Array.isArray(_data["Errors"])) {
                this.errors = [] as any;
                for (let item of _data["Errors"])
                    this.errors!.push(item);
            }
            this.data = _data["Data"] ? GetScheduleGeneratorResponse.fromJS(_data["Data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): IResponseOfGetScheduleGeneratorResponse {
        data = typeof data === 'object' ? data : {};
        let result = new IResponseOfGetScheduleGeneratorResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Ok"] = this.ok;
        if (Array.isArray(this.errors)) {
            data["Errors"] = [];
            for (let item of this.errors)
                data["Errors"].push(item);
        }
        data["Data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IIResponseOfGetScheduleGeneratorResponse {
    ok: boolean;
    errors?: string[] | undefined;
    data?: GetScheduleGeneratorResponse | undefined;
}

export class GetScheduleGeneratorResponse implements IGetScheduleGeneratorResponse {
    scheduleGeneratorItems?: GetScheduleGeneratorItems[] | undefined;

    constructor(data?: IGetScheduleGeneratorResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["ScheduleGeneratorItems"])) {
                this.scheduleGeneratorItems = [] as any;
                for (let item of _data["ScheduleGeneratorItems"])
                    this.scheduleGeneratorItems!.push(GetScheduleGeneratorItems.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetScheduleGeneratorResponse {
        data = typeof data === 'object' ? data : {};
        let result = new GetScheduleGeneratorResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.scheduleGeneratorItems)) {
            data["ScheduleGeneratorItems"] = [];
            for (let item of this.scheduleGeneratorItems)
                data["ScheduleGeneratorItems"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IGetScheduleGeneratorResponse {
    scheduleGeneratorItems?: GetScheduleGeneratorItems[] | undefined;
}

export class GetScheduleGeneratorItems implements IGetScheduleGeneratorItems {
    iD?: number | undefined;
    name?: string | undefined;
    scheduleTypeID?: number | undefined;
    scheduleTypeName?: string | undefined;
    startTime?: string | undefined;
    endTime?: string | undefined;
    breakStartTime?: string | undefined;
    breakEndTime?: string | undefined;
    minCheckInTime?: string | undefined;
    maxCheckOutTime?: string | undefined;
    breakAmount?: number | undefined;
    weekHouresAmount?: number | undefined;
    daylyHouresAmount?: number | undefined;
    onWorkingDaysOnly?: boolean | undefined;
    onWorkingHouresOnly?: boolean | undefined;

    constructor(data?: IGetScheduleGeneratorItems) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.iD = _data["ID"];
            this.name = _data["Name"];
            this.scheduleTypeID = _data["ScheduleTypeID"];
            this.scheduleTypeName = _data["ScheduleTypeName"];
            this.startTime = _data["StartTime"];
            this.endTime = _data["EndTime"];
            this.breakStartTime = _data["BreakStartTime"];
            this.breakEndTime = _data["BreakEndTime"];
            this.minCheckInTime = _data["MinCheckInTime"];
            this.maxCheckOutTime = _data["MaxCheckOutTime"];
            this.breakAmount = _data["BreakAmount"];
            this.weekHouresAmount = _data["WeekHouresAmount"];
            this.daylyHouresAmount = _data["DaylyHouresAmount"];
            this.onWorkingDaysOnly = _data["OnWorkingDaysOnly"];
            this.onWorkingHouresOnly = _data["OnWorkingHouresOnly"];
        }
    }

    static fromJS(data: any): GetScheduleGeneratorItems {
        data = typeof data === 'object' ? data : {};
        let result = new GetScheduleGeneratorItems();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ID"] = this.iD;
        data["Name"] = this.name;
        data["ScheduleTypeID"] = this.scheduleTypeID;
        data["ScheduleTypeName"] = this.scheduleTypeName;
        data["StartTime"] = this.startTime;
        data["EndTime"] = this.endTime;
        data["BreakStartTime"] = this.breakStartTime;
        data["BreakEndTime"] = this.breakEndTime;
        data["MinCheckInTime"] = this.minCheckInTime;
        data["MaxCheckOutTime"] = this.maxCheckOutTime;
        data["BreakAmount"] = this.breakAmount;
        data["WeekHouresAmount"] = this.weekHouresAmount;
        data["DaylyHouresAmount"] = this.daylyHouresAmount;
        data["OnWorkingDaysOnly"] = this.onWorkingDaysOnly;
        data["OnWorkingHouresOnly"] = this.onWorkingHouresOnly;
        return data; 
    }
}

export interface IGetScheduleGeneratorItems {
    iD?: number | undefined;
    name?: string | undefined;
    scheduleTypeID?: number | undefined;
    scheduleTypeName?: string | undefined;
    startTime?: string | undefined;
    endTime?: string | undefined;
    breakStartTime?: string | undefined;
    breakEndTime?: string | undefined;
    minCheckInTime?: string | undefined;
    maxCheckOutTime?: string | undefined;
    breakAmount?: number | undefined;
    weekHouresAmount?: number | undefined;
    daylyHouresAmount?: number | undefined;
    onWorkingDaysOnly?: boolean | undefined;
    onWorkingHouresOnly?: boolean | undefined;
}

export class AddScheduleGenerator implements IAddScheduleGenerator {
    name?: string | undefined;
    scheduleTypeID?: number | undefined;
    scheduleTypeName?: string | undefined;
    startTime?: string | undefined;
    endTime?: string | undefined;
    breakStartTime?: string | undefined;
    breakEndTime?: string | undefined;
    minCheckInTime?: string | undefined;
    maxCheckOutTime?: string | undefined;
    breakAmount?: number | undefined;
    weekHouresAmount?: number | undefined;
    daylyHouresAmount?: number | undefined;
    onWorkingDaysOnly?: boolean | undefined;
    onWorkingHouresOnly?: boolean | undefined;

    constructor(data?: IAddScheduleGenerator) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["Name"];
            this.scheduleTypeID = _data["ScheduleTypeID"];
            this.scheduleTypeName = _data["ScheduleTypeName"];
            this.startTime = _data["StartTime"];
            this.endTime = _data["EndTime"];
            this.breakStartTime = _data["BreakStartTime"];
            this.breakEndTime = _data["BreakEndTime"];
            this.minCheckInTime = _data["MinCheckInTime"];
            this.maxCheckOutTime = _data["MaxCheckOutTime"];
            this.breakAmount = _data["BreakAmount"];
            this.weekHouresAmount = _data["WeekHouresAmount"];
            this.daylyHouresAmount = _data["DaylyHouresAmount"];
            this.onWorkingDaysOnly = _data["OnWorkingDaysOnly"];
            this.onWorkingHouresOnly = _data["OnWorkingHouresOnly"];
        }
    }

    static fromJS(data: any): AddScheduleGenerator {
        data = typeof data === 'object' ? data : {};
        let result = new AddScheduleGenerator();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Name"] = this.name;
        data["ScheduleTypeID"] = this.scheduleTypeID;
        data["ScheduleTypeName"] = this.scheduleTypeName;
        data["StartTime"] = this.startTime;
        data["EndTime"] = this.endTime;
        data["BreakStartTime"] = this.breakStartTime;
        data["BreakEndTime"] = this.breakEndTime;
        data["MinCheckInTime"] = this.minCheckInTime;
        data["MaxCheckOutTime"] = this.maxCheckOutTime;
        data["BreakAmount"] = this.breakAmount;
        data["WeekHouresAmount"] = this.weekHouresAmount;
        data["DaylyHouresAmount"] = this.daylyHouresAmount;
        data["OnWorkingDaysOnly"] = this.onWorkingDaysOnly;
        data["OnWorkingHouresOnly"] = this.onWorkingHouresOnly;
        return data; 
    }
}

export interface IAddScheduleGenerator {
    name?: string | undefined;
    scheduleTypeID?: number | undefined;
    scheduleTypeName?: string | undefined;
    startTime?: string | undefined;
    endTime?: string | undefined;
    breakStartTime?: string | undefined;
    breakEndTime?: string | undefined;
    minCheckInTime?: string | undefined;
    maxCheckOutTime?: string | undefined;
    breakAmount?: number | undefined;
    weekHouresAmount?: number | undefined;
    daylyHouresAmount?: number | undefined;
    onWorkingDaysOnly?: boolean | undefined;
    onWorkingHouresOnly?: boolean | undefined;
}

export class IResponseOfListOfSalaryGeneratorModel implements IIResponseOfListOfSalaryGeneratorModel {
    ok!: boolean;
    errors?: string[] | undefined;
    data?: SalaryGeneratorModel[] | undefined;

    constructor(data?: IIResponseOfListOfSalaryGeneratorModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ok = _data["Ok"];
            if (Array.isArray(_data["Errors"])) {
                this.errors = [] as any;
                for (let item of _data["Errors"])
                    this.errors!.push(item);
            }
            if (Array.isArray(_data["Data"])) {
                this.data = [] as any;
                for (let item of _data["Data"])
                    this.data!.push(SalaryGeneratorModel.fromJS(item));
            }
        }
    }

    static fromJS(data: any): IResponseOfListOfSalaryGeneratorModel {
        data = typeof data === 'object' ? data : {};
        let result = new IResponseOfListOfSalaryGeneratorModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Ok"] = this.ok;
        if (Array.isArray(this.errors)) {
            data["Errors"] = [];
            for (let item of this.errors)
                data["Errors"].push(item);
        }
        if (Array.isArray(this.data)) {
            data["Data"] = [];
            for (let item of this.data)
                data["Data"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IIResponseOfListOfSalaryGeneratorModel {
    ok: boolean;
    errors?: string[] | undefined;
    data?: SalaryGeneratorModel[] | undefined;
}

export class SalaryGeneratorModel implements ISalaryGeneratorModel {
    iD?: number | undefined;
    amount?: number | undefined;
    name?: string | undefined;
    currencyID?: number | undefined;
    salaryTypeID?: number | undefined;
    salaryType?: string | undefined;
    isHourly?: boolean | undefined;
    fineTypeID?: number | undefined;
    fineType?: string | undefined;
    fineAmount?: number | undefined;
    forgivenessTypeID?: number | undefined;
    forgivenessType?: string | undefined;
    forgivenessAmount?: number | undefined;

    constructor(data?: ISalaryGeneratorModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.iD = _data["ID"];
            this.amount = _data["Amount"];
            this.name = _data["Name"];
            this.currencyID = _data["CurrencyID"];
            this.salaryTypeID = _data["SalaryTypeID"];
            this.salaryType = _data["SalaryType"];
            this.isHourly = _data["IsHourly"];
            this.fineTypeID = _data["FineTypeID"];
            this.fineType = _data["FineType"];
            this.fineAmount = _data["FineAmount"];
            this.forgivenessTypeID = _data["ForgivenessTypeID"];
            this.forgivenessType = _data["ForgivenessType"];
            this.forgivenessAmount = _data["ForgivenessAmount"];
        }
    }

    static fromJS(data: any): SalaryGeneratorModel {
        data = typeof data === 'object' ? data : {};
        let result = new SalaryGeneratorModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ID"] = this.iD;
        data["Amount"] = this.amount;
        data["Name"] = this.name;
        data["CurrencyID"] = this.currencyID;
        data["SalaryTypeID"] = this.salaryTypeID;
        data["SalaryType"] = this.salaryType;
        data["IsHourly"] = this.isHourly;
        data["FineTypeID"] = this.fineTypeID;
        data["FineType"] = this.fineType;
        data["FineAmount"] = this.fineAmount;
        data["ForgivenessTypeID"] = this.forgivenessTypeID;
        data["ForgivenessType"] = this.forgivenessType;
        data["ForgivenessAmount"] = this.forgivenessAmount;
        return data; 
    }
}

export interface ISalaryGeneratorModel {
    iD?: number | undefined;
    amount?: number | undefined;
    name?: string | undefined;
    currencyID?: number | undefined;
    salaryTypeID?: number | undefined;
    salaryType?: string | undefined;
    isHourly?: boolean | undefined;
    fineTypeID?: number | undefined;
    fineType?: string | undefined;
    fineAmount?: number | undefined;
    forgivenessTypeID?: number | undefined;
    forgivenessType?: string | undefined;
    forgivenessAmount?: number | undefined;
}

export class AddBranchRequest implements IAddBranchRequest {
    branchName?: string | undefined;
    cityID?: number | undefined;
    countryID?: number | undefined;
    address?: string | undefined;

    constructor(data?: IAddBranchRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.branchName = _data["BranchName"];
            this.cityID = _data["CityID"];
            this.countryID = _data["CountryID"];
            this.address = _data["Address"];
        }
    }

    static fromJS(data: any): AddBranchRequest {
        data = typeof data === 'object' ? data : {};
        let result = new AddBranchRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["BranchName"] = this.branchName;
        data["CityID"] = this.cityID;
        data["CountryID"] = this.countryID;
        data["Address"] = this.address;
        return data; 
    }
}

export interface IAddBranchRequest {
    branchName?: string | undefined;
    cityID?: number | undefined;
    countryID?: number | undefined;
    address?: string | undefined;
}

export class IResponseOfAddBranchResponse implements IIResponseOfAddBranchResponse {
    ok!: boolean;
    errors?: string[] | undefined;
    data?: AddBranchResponse | undefined;

    constructor(data?: IIResponseOfAddBranchResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ok = _data["Ok"];
            if (Array.isArray(_data["Errors"])) {
                this.errors = [] as any;
                for (let item of _data["Errors"])
                    this.errors!.push(item);
            }
            this.data = _data["Data"] ? AddBranchResponse.fromJS(_data["Data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): IResponseOfAddBranchResponse {
        data = typeof data === 'object' ? data : {};
        let result = new IResponseOfAddBranchResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Ok"] = this.ok;
        if (Array.isArray(this.errors)) {
            data["Errors"] = [];
            for (let item of this.errors)
                data["Errors"].push(item);
        }
        data["Data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IIResponseOfAddBranchResponse {
    ok: boolean;
    errors?: string[] | undefined;
    data?: AddBranchResponse | undefined;
}

export class AddBranchResponse implements IAddBranchResponse {

    constructor(data?: IAddBranchResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): AddBranchResponse {
        data = typeof data === 'object' ? data : {};
        let result = new AddBranchResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data; 
    }
}

export interface IAddBranchResponse {
}

export class EditBranchRequest implements IEditBranchRequest {
    iD?: number | undefined;
    branchName?: string | undefined;
    cityID?: number | undefined;
    countryID?: number | undefined;
    address?: string | undefined;

    constructor(data?: IEditBranchRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.iD = _data["ID"];
            this.branchName = _data["BranchName"];
            this.cityID = _data["CityID"];
            this.countryID = _data["CountryID"];
            this.address = _data["Address"];
        }
    }

    static fromJS(data: any): EditBranchRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EditBranchRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ID"] = this.iD;
        data["BranchName"] = this.branchName;
        data["CityID"] = this.cityID;
        data["CountryID"] = this.countryID;
        data["Address"] = this.address;
        return data; 
    }
}

export interface IEditBranchRequest {
    iD?: number | undefined;
    branchName?: string | undefined;
    cityID?: number | undefined;
    countryID?: number | undefined;
    address?: string | undefined;
}

export class IResponseOfEditBranchResponse implements IIResponseOfEditBranchResponse {
    ok!: boolean;
    errors?: string[] | undefined;
    data?: EditBranchResponse | undefined;

    constructor(data?: IIResponseOfEditBranchResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ok = _data["Ok"];
            if (Array.isArray(_data["Errors"])) {
                this.errors = [] as any;
                for (let item of _data["Errors"])
                    this.errors!.push(item);
            }
            this.data = _data["Data"] ? EditBranchResponse.fromJS(_data["Data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): IResponseOfEditBranchResponse {
        data = typeof data === 'object' ? data : {};
        let result = new IResponseOfEditBranchResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Ok"] = this.ok;
        if (Array.isArray(this.errors)) {
            data["Errors"] = [];
            for (let item of this.errors)
                data["Errors"].push(item);
        }
        data["Data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IIResponseOfEditBranchResponse {
    ok: boolean;
    errors?: string[] | undefined;
    data?: EditBranchResponse | undefined;
}

export class EditBranchResponse implements IEditBranchResponse {

    constructor(data?: IEditBranchResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): EditBranchResponse {
        data = typeof data === 'object' ? data : {};
        let result = new EditBranchResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data; 
    }
}

export interface IEditBranchResponse {
}

export class IResponseOfGetEmployeePositionsResponse implements IIResponseOfGetEmployeePositionsResponse {
    ok!: boolean;
    errors?: string[] | undefined;
    data?: GetEmployeePositionsResponse | undefined;

    constructor(data?: IIResponseOfGetEmployeePositionsResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ok = _data["Ok"];
            if (Array.isArray(_data["Errors"])) {
                this.errors = [] as any;
                for (let item of _data["Errors"])
                    this.errors!.push(item);
            }
            this.data = _data["Data"] ? GetEmployeePositionsResponse.fromJS(_data["Data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): IResponseOfGetEmployeePositionsResponse {
        data = typeof data === 'object' ? data : {};
        let result = new IResponseOfGetEmployeePositionsResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Ok"] = this.ok;
        if (Array.isArray(this.errors)) {
            data["Errors"] = [];
            for (let item of this.errors)
                data["Errors"].push(item);
        }
        data["Data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IIResponseOfGetEmployeePositionsResponse {
    ok: boolean;
    errors?: string[] | undefined;
    data?: GetEmployeePositionsResponse | undefined;
}

export class GetEmployeePositionsResponse implements IGetEmployeePositionsResponse {
    getEmployeePositionsList?: GetEmployeePositionsListItem[] | undefined;

    constructor(data?: IGetEmployeePositionsResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["getEmployeePositionsList"])) {
                this.getEmployeePositionsList = [] as any;
                for (let item of _data["getEmployeePositionsList"])
                    this.getEmployeePositionsList!.push(GetEmployeePositionsListItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetEmployeePositionsResponse {
        data = typeof data === 'object' ? data : {};
        let result = new GetEmployeePositionsResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.getEmployeePositionsList)) {
            data["getEmployeePositionsList"] = [];
            for (let item of this.getEmployeePositionsList)
                data["getEmployeePositionsList"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IGetEmployeePositionsResponse {
    getEmployeePositionsList?: GetEmployeePositionsListItem[] | undefined;
}

export class GetEmployeePositionsListItem implements IGetEmployeePositionsListItem {
    iD?: number | undefined;
    description?: string | undefined;

    constructor(data?: IGetEmployeePositionsListItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.iD = _data["ID"];
            this.description = _data["Description"];
        }
    }

    static fromJS(data: any): GetEmployeePositionsListItem {
        data = typeof data === 'object' ? data : {};
        let result = new GetEmployeePositionsListItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ID"] = this.iD;
        data["Description"] = this.description;
        return data; 
    }
}

export interface IGetEmployeePositionsListItem {
    iD?: number | undefined;
    description?: string | undefined;
}

export class AddEmployeePositionRequest implements IAddEmployeePositionRequest {
    description?: string | undefined;

    constructor(data?: IAddEmployeePositionRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.description = _data["Description"];
        }
    }

    static fromJS(data: any): AddEmployeePositionRequest {
        data = typeof data === 'object' ? data : {};
        let result = new AddEmployeePositionRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Description"] = this.description;
        return data; 
    }
}

export interface IAddEmployeePositionRequest {
    description?: string | undefined;
}

export class IResponseOfAddEmployeePositionResponse implements IIResponseOfAddEmployeePositionResponse {
    ok!: boolean;
    errors?: string[] | undefined;
    data?: AddEmployeePositionResponse | undefined;

    constructor(data?: IIResponseOfAddEmployeePositionResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ok = _data["Ok"];
            if (Array.isArray(_data["Errors"])) {
                this.errors = [] as any;
                for (let item of _data["Errors"])
                    this.errors!.push(item);
            }
            this.data = _data["Data"] ? AddEmployeePositionResponse.fromJS(_data["Data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): IResponseOfAddEmployeePositionResponse {
        data = typeof data === 'object' ? data : {};
        let result = new IResponseOfAddEmployeePositionResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Ok"] = this.ok;
        if (Array.isArray(this.errors)) {
            data["Errors"] = [];
            for (let item of this.errors)
                data["Errors"].push(item);
        }
        data["Data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IIResponseOfAddEmployeePositionResponse {
    ok: boolean;
    errors?: string[] | undefined;
    data?: AddEmployeePositionResponse | undefined;
}

export class AddEmployeePositionResponse implements IAddEmployeePositionResponse {

    constructor(data?: IAddEmployeePositionResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): AddEmployeePositionResponse {
        data = typeof data === 'object' ? data : {};
        let result = new AddEmployeePositionResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data; 
    }
}

export interface IAddEmployeePositionResponse {
}

export class EditEmployeePositionRequest implements IEditEmployeePositionRequest {
    iD?: number | undefined;
    description?: string | undefined;

    constructor(data?: IEditEmployeePositionRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.iD = _data["ID"];
            this.description = _data["Description"];
        }
    }

    static fromJS(data: any): EditEmployeePositionRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EditEmployeePositionRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ID"] = this.iD;
        data["Description"] = this.description;
        return data; 
    }
}

export interface IEditEmployeePositionRequest {
    iD?: number | undefined;
    description?: string | undefined;
}

export class IResponseOfEditEmployeePositionResponse implements IIResponseOfEditEmployeePositionResponse {
    ok!: boolean;
    errors?: string[] | undefined;
    data?: EditEmployeePositionResponse | undefined;

    constructor(data?: IIResponseOfEditEmployeePositionResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ok = _data["Ok"];
            if (Array.isArray(_data["Errors"])) {
                this.errors = [] as any;
                for (let item of _data["Errors"])
                    this.errors!.push(item);
            }
            this.data = _data["Data"] ? EditEmployeePositionResponse.fromJS(_data["Data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): IResponseOfEditEmployeePositionResponse {
        data = typeof data === 'object' ? data : {};
        let result = new IResponseOfEditEmployeePositionResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Ok"] = this.ok;
        if (Array.isArray(this.errors)) {
            data["Errors"] = [];
            for (let item of this.errors)
                data["Errors"].push(item);
        }
        data["Data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IIResponseOfEditEmployeePositionResponse {
    ok: boolean;
    errors?: string[] | undefined;
    data?: EditEmployeePositionResponse | undefined;
}

export class EditEmployeePositionResponse implements IEditEmployeePositionResponse {

    constructor(data?: IEditEmployeePositionResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): EditEmployeePositionResponse {
        data = typeof data === 'object' ? data : {};
        let result = new EditEmployeePositionResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data; 
    }
}

export interface IEditEmployeePositionResponse {
}

export class IResponseOfGetSalaryTypeListResponse implements IIResponseOfGetSalaryTypeListResponse {
    ok!: boolean;
    errors?: string[] | undefined;
    data?: GetSalaryTypeListResponse | undefined;

    constructor(data?: IIResponseOfGetSalaryTypeListResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ok = _data["Ok"];
            if (Array.isArray(_data["Errors"])) {
                this.errors = [] as any;
                for (let item of _data["Errors"])
                    this.errors!.push(item);
            }
            this.data = _data["Data"] ? GetSalaryTypeListResponse.fromJS(_data["Data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): IResponseOfGetSalaryTypeListResponse {
        data = typeof data === 'object' ? data : {};
        let result = new IResponseOfGetSalaryTypeListResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Ok"] = this.ok;
        if (Array.isArray(this.errors)) {
            data["Errors"] = [];
            for (let item of this.errors)
                data["Errors"].push(item);
        }
        data["Data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IIResponseOfGetSalaryTypeListResponse {
    ok: boolean;
    errors?: string[] | undefined;
    data?: GetSalaryTypeListResponse | undefined;
}

export class GetSalaryTypeListResponse implements IGetSalaryTypeListResponse {
    salaryTypes?: GetSalaryTypeListItem[] | undefined;

    constructor(data?: IGetSalaryTypeListResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["SalaryTypes"])) {
                this.salaryTypes = [] as any;
                for (let item of _data["SalaryTypes"])
                    this.salaryTypes!.push(GetSalaryTypeListItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetSalaryTypeListResponse {
        data = typeof data === 'object' ? data : {};
        let result = new GetSalaryTypeListResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.salaryTypes)) {
            data["SalaryTypes"] = [];
            for (let item of this.salaryTypes)
                data["SalaryTypes"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IGetSalaryTypeListResponse {
    salaryTypes?: GetSalaryTypeListItem[] | undefined;
}

export class GetSalaryTypeListItem implements IGetSalaryTypeListItem {
    iD?: number | undefined;
    description?: string | undefined;

    constructor(data?: IGetSalaryTypeListItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.iD = _data["ID"];
            this.description = _data["Description"];
        }
    }

    static fromJS(data: any): GetSalaryTypeListItem {
        data = typeof data === 'object' ? data : {};
        let result = new GetSalaryTypeListItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ID"] = this.iD;
        data["Description"] = this.description;
        return data; 
    }
}

export interface IGetSalaryTypeListItem {
    iD?: number | undefined;
    description?: string | undefined;
}

export class AddSalaryTypeRequest implements IAddSalaryTypeRequest {
    description?: string | undefined;

    constructor(data?: IAddSalaryTypeRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.description = _data["Description"];
        }
    }

    static fromJS(data: any): AddSalaryTypeRequest {
        data = typeof data === 'object' ? data : {};
        let result = new AddSalaryTypeRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Description"] = this.description;
        return data; 
    }
}

export interface IAddSalaryTypeRequest {
    description?: string | undefined;
}

export class IResponseOfAddSalaryTypeResponse implements IIResponseOfAddSalaryTypeResponse {
    ok!: boolean;
    errors?: string[] | undefined;
    data?: AddSalaryTypeResponse | undefined;

    constructor(data?: IIResponseOfAddSalaryTypeResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ok = _data["Ok"];
            if (Array.isArray(_data["Errors"])) {
                this.errors = [] as any;
                for (let item of _data["Errors"])
                    this.errors!.push(item);
            }
            this.data = _data["Data"] ? AddSalaryTypeResponse.fromJS(_data["Data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): IResponseOfAddSalaryTypeResponse {
        data = typeof data === 'object' ? data : {};
        let result = new IResponseOfAddSalaryTypeResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Ok"] = this.ok;
        if (Array.isArray(this.errors)) {
            data["Errors"] = [];
            for (let item of this.errors)
                data["Errors"].push(item);
        }
        data["Data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IIResponseOfAddSalaryTypeResponse {
    ok: boolean;
    errors?: string[] | undefined;
    data?: AddSalaryTypeResponse | undefined;
}

export class AddSalaryTypeResponse implements IAddSalaryTypeResponse {

    constructor(data?: IAddSalaryTypeResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): AddSalaryTypeResponse {
        data = typeof data === 'object' ? data : {};
        let result = new AddSalaryTypeResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data; 
    }
}

export interface IAddSalaryTypeResponse {
}

export class EditSalaryTypeRequest implements IEditSalaryTypeRequest {
    iD?: number | undefined;
    description?: string | undefined;

    constructor(data?: IEditSalaryTypeRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.iD = _data["ID"];
            this.description = _data["Description"];
        }
    }

    static fromJS(data: any): EditSalaryTypeRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EditSalaryTypeRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ID"] = this.iD;
        data["Description"] = this.description;
        return data; 
    }
}

export interface IEditSalaryTypeRequest {
    iD?: number | undefined;
    description?: string | undefined;
}

export class IResponseOfEditSalaryTypeResponse implements IIResponseOfEditSalaryTypeResponse {
    ok!: boolean;
    errors?: string[] | undefined;
    data?: EditSalaryTypeResponse | undefined;

    constructor(data?: IIResponseOfEditSalaryTypeResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ok = _data["Ok"];
            if (Array.isArray(_data["Errors"])) {
                this.errors = [] as any;
                for (let item of _data["Errors"])
                    this.errors!.push(item);
            }
            this.data = _data["Data"] ? EditSalaryTypeResponse.fromJS(_data["Data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): IResponseOfEditSalaryTypeResponse {
        data = typeof data === 'object' ? data : {};
        let result = new IResponseOfEditSalaryTypeResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Ok"] = this.ok;
        if (Array.isArray(this.errors)) {
            data["Errors"] = [];
            for (let item of this.errors)
                data["Errors"].push(item);
        }
        data["Data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IIResponseOfEditSalaryTypeResponse {
    ok: boolean;
    errors?: string[] | undefined;
    data?: EditSalaryTypeResponse | undefined;
}

export class EditSalaryTypeResponse implements IEditSalaryTypeResponse {

    constructor(data?: IEditSalaryTypeResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): EditSalaryTypeResponse {
        data = typeof data === 'object' ? data : {};
        let result = new EditSalaryTypeResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data; 
    }
}

export interface IEditSalaryTypeResponse {
}

export class IResponseOfGetFineTypeListResponse implements IIResponseOfGetFineTypeListResponse {
    ok!: boolean;
    errors?: string[] | undefined;
    data?: GetFineTypeListResponse | undefined;

    constructor(data?: IIResponseOfGetFineTypeListResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ok = _data["Ok"];
            if (Array.isArray(_data["Errors"])) {
                this.errors = [] as any;
                for (let item of _data["Errors"])
                    this.errors!.push(item);
            }
            this.data = _data["Data"] ? GetFineTypeListResponse.fromJS(_data["Data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): IResponseOfGetFineTypeListResponse {
        data = typeof data === 'object' ? data : {};
        let result = new IResponseOfGetFineTypeListResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Ok"] = this.ok;
        if (Array.isArray(this.errors)) {
            data["Errors"] = [];
            for (let item of this.errors)
                data["Errors"].push(item);
        }
        data["Data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IIResponseOfGetFineTypeListResponse {
    ok: boolean;
    errors?: string[] | undefined;
    data?: GetFineTypeListResponse | undefined;
}

export class GetFineTypeListResponse implements IGetFineTypeListResponse {
    fineTypes?: GetFineTypeListItem[] | undefined;

    constructor(data?: IGetFineTypeListResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["FineTypes"])) {
                this.fineTypes = [] as any;
                for (let item of _data["FineTypes"])
                    this.fineTypes!.push(GetFineTypeListItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetFineTypeListResponse {
        data = typeof data === 'object' ? data : {};
        let result = new GetFineTypeListResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.fineTypes)) {
            data["FineTypes"] = [];
            for (let item of this.fineTypes)
                data["FineTypes"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IGetFineTypeListResponse {
    fineTypes?: GetFineTypeListItem[] | undefined;
}

export class GetFineTypeListItem implements IGetFineTypeListItem {
    iD?: number | undefined;
    description?: string | undefined;

    constructor(data?: IGetFineTypeListItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.iD = _data["ID"];
            this.description = _data["Description"];
        }
    }

    static fromJS(data: any): GetFineTypeListItem {
        data = typeof data === 'object' ? data : {};
        let result = new GetFineTypeListItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ID"] = this.iD;
        data["Description"] = this.description;
        return data; 
    }
}

export interface IGetFineTypeListItem {
    iD?: number | undefined;
    description?: string | undefined;
}

export class AddFineTypeRequest implements IAddFineTypeRequest {
    description?: string | undefined;

    constructor(data?: IAddFineTypeRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.description = _data["Description"];
        }
    }

    static fromJS(data: any): AddFineTypeRequest {
        data = typeof data === 'object' ? data : {};
        let result = new AddFineTypeRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Description"] = this.description;
        return data; 
    }
}

export interface IAddFineTypeRequest {
    description?: string | undefined;
}

export class IResponseOfAddFineTypeResponse implements IIResponseOfAddFineTypeResponse {
    ok!: boolean;
    errors?: string[] | undefined;
    data?: AddFineTypeResponse | undefined;

    constructor(data?: IIResponseOfAddFineTypeResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ok = _data["Ok"];
            if (Array.isArray(_data["Errors"])) {
                this.errors = [] as any;
                for (let item of _data["Errors"])
                    this.errors!.push(item);
            }
            this.data = _data["Data"] ? AddFineTypeResponse.fromJS(_data["Data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): IResponseOfAddFineTypeResponse {
        data = typeof data === 'object' ? data : {};
        let result = new IResponseOfAddFineTypeResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Ok"] = this.ok;
        if (Array.isArray(this.errors)) {
            data["Errors"] = [];
            for (let item of this.errors)
                data["Errors"].push(item);
        }
        data["Data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IIResponseOfAddFineTypeResponse {
    ok: boolean;
    errors?: string[] | undefined;
    data?: AddFineTypeResponse | undefined;
}

export class AddFineTypeResponse implements IAddFineTypeResponse {

    constructor(data?: IAddFineTypeResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): AddFineTypeResponse {
        data = typeof data === 'object' ? data : {};
        let result = new AddFineTypeResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data; 
    }
}

export interface IAddFineTypeResponse {
}

export class EditFineTypeRequest implements IEditFineTypeRequest {
    iD?: number | undefined;
    description?: string | undefined;

    constructor(data?: IEditFineTypeRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.iD = _data["ID"];
            this.description = _data["Description"];
        }
    }

    static fromJS(data: any): EditFineTypeRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EditFineTypeRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ID"] = this.iD;
        data["Description"] = this.description;
        return data; 
    }
}

export interface IEditFineTypeRequest {
    iD?: number | undefined;
    description?: string | undefined;
}

export class IResponseOfEditFineTypeResponse implements IIResponseOfEditFineTypeResponse {
    ok!: boolean;
    errors?: string[] | undefined;
    data?: EditFineTypeResponse | undefined;

    constructor(data?: IIResponseOfEditFineTypeResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ok = _data["Ok"];
            if (Array.isArray(_data["Errors"])) {
                this.errors = [] as any;
                for (let item of _data["Errors"])
                    this.errors!.push(item);
            }
            this.data = _data["Data"] ? EditFineTypeResponse.fromJS(_data["Data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): IResponseOfEditFineTypeResponse {
        data = typeof data === 'object' ? data : {};
        let result = new IResponseOfEditFineTypeResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Ok"] = this.ok;
        if (Array.isArray(this.errors)) {
            data["Errors"] = [];
            for (let item of this.errors)
                data["Errors"].push(item);
        }
        data["Data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IIResponseOfEditFineTypeResponse {
    ok: boolean;
    errors?: string[] | undefined;
    data?: EditFineTypeResponse | undefined;
}

export class EditFineTypeResponse implements IEditFineTypeResponse {

    constructor(data?: IEditFineTypeResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): EditFineTypeResponse {
        data = typeof data === 'object' ? data : {};
        let result = new EditFineTypeResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data; 
    }
}

export interface IEditFineTypeResponse {
}

export class IResponseOfGetForgivenessTypeListResponse implements IIResponseOfGetForgivenessTypeListResponse {
    ok!: boolean;
    errors?: string[] | undefined;
    data?: GetForgivenessTypeListResponse | undefined;

    constructor(data?: IIResponseOfGetForgivenessTypeListResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ok = _data["Ok"];
            if (Array.isArray(_data["Errors"])) {
                this.errors = [] as any;
                for (let item of _data["Errors"])
                    this.errors!.push(item);
            }
            this.data = _data["Data"] ? GetForgivenessTypeListResponse.fromJS(_data["Data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): IResponseOfGetForgivenessTypeListResponse {
        data = typeof data === 'object' ? data : {};
        let result = new IResponseOfGetForgivenessTypeListResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Ok"] = this.ok;
        if (Array.isArray(this.errors)) {
            data["Errors"] = [];
            for (let item of this.errors)
                data["Errors"].push(item);
        }
        data["Data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IIResponseOfGetForgivenessTypeListResponse {
    ok: boolean;
    errors?: string[] | undefined;
    data?: GetForgivenessTypeListResponse | undefined;
}

export class GetForgivenessTypeListResponse implements IGetForgivenessTypeListResponse {
    forgivenessTypes?: GetForgivenessTypeListItem[] | undefined;

    constructor(data?: IGetForgivenessTypeListResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["ForgivenessTypes"])) {
                this.forgivenessTypes = [] as any;
                for (let item of _data["ForgivenessTypes"])
                    this.forgivenessTypes!.push(GetForgivenessTypeListItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetForgivenessTypeListResponse {
        data = typeof data === 'object' ? data : {};
        let result = new GetForgivenessTypeListResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.forgivenessTypes)) {
            data["ForgivenessTypes"] = [];
            for (let item of this.forgivenessTypes)
                data["ForgivenessTypes"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IGetForgivenessTypeListResponse {
    forgivenessTypes?: GetForgivenessTypeListItem[] | undefined;
}

export class GetForgivenessTypeListItem implements IGetForgivenessTypeListItem {
    iD?: number | undefined;
    description?: string | undefined;

    constructor(data?: IGetForgivenessTypeListItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.iD = _data["ID"];
            this.description = _data["Description"];
        }
    }

    static fromJS(data: any): GetForgivenessTypeListItem {
        data = typeof data === 'object' ? data : {};
        let result = new GetForgivenessTypeListItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ID"] = this.iD;
        data["Description"] = this.description;
        return data; 
    }
}

export interface IGetForgivenessTypeListItem {
    iD?: number | undefined;
    description?: string | undefined;
}

export class IResponseOfGetCountryListResponse implements IIResponseOfGetCountryListResponse {
    ok!: boolean;
    errors?: string[] | undefined;
    data?: GetCountryListResponse | undefined;

    constructor(data?: IIResponseOfGetCountryListResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ok = _data["Ok"];
            if (Array.isArray(_data["Errors"])) {
                this.errors = [] as any;
                for (let item of _data["Errors"])
                    this.errors!.push(item);
            }
            this.data = _data["Data"] ? GetCountryListResponse.fromJS(_data["Data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): IResponseOfGetCountryListResponse {
        data = typeof data === 'object' ? data : {};
        let result = new IResponseOfGetCountryListResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Ok"] = this.ok;
        if (Array.isArray(this.errors)) {
            data["Errors"] = [];
            for (let item of this.errors)
                data["Errors"].push(item);
        }
        data["Data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IIResponseOfGetCountryListResponse {
    ok: boolean;
    errors?: string[] | undefined;
    data?: GetCountryListResponse | undefined;
}

export class GetCountryListResponse implements IGetCountryListResponse {
    countryList?: GetCountryListItem[] | undefined;

    constructor(data?: IGetCountryListResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["CountryList"])) {
                this.countryList = [] as any;
                for (let item of _data["CountryList"])
                    this.countryList!.push(GetCountryListItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetCountryListResponse {
        data = typeof data === 'object' ? data : {};
        let result = new GetCountryListResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.countryList)) {
            data["CountryList"] = [];
            for (let item of this.countryList)
                data["CountryList"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IGetCountryListResponse {
    countryList?: GetCountryListItem[] | undefined;
}

export class GetCountryListItem implements IGetCountryListItem {
    iD?: number | undefined;
    description?: string | undefined;

    constructor(data?: IGetCountryListItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.iD = _data["ID"];
            this.description = _data["Description"];
        }
    }

    static fromJS(data: any): GetCountryListItem {
        data = typeof data === 'object' ? data : {};
        let result = new GetCountryListItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ID"] = this.iD;
        data["Description"] = this.description;
        return data; 
    }
}

export interface IGetCountryListItem {
    iD?: number | undefined;
    description?: string | undefined;
}

export class IResponseOfGetCitiesListByCountryIDResponse implements IIResponseOfGetCitiesListByCountryIDResponse {
    ok!: boolean;
    errors?: string[] | undefined;
    data?: GetCitiesListByCountryIDResponse | undefined;

    constructor(data?: IIResponseOfGetCitiesListByCountryIDResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ok = _data["Ok"];
            if (Array.isArray(_data["Errors"])) {
                this.errors = [] as any;
                for (let item of _data["Errors"])
                    this.errors!.push(item);
            }
            this.data = _data["Data"] ? GetCitiesListByCountryIDResponse.fromJS(_data["Data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): IResponseOfGetCitiesListByCountryIDResponse {
        data = typeof data === 'object' ? data : {};
        let result = new IResponseOfGetCitiesListByCountryIDResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Ok"] = this.ok;
        if (Array.isArray(this.errors)) {
            data["Errors"] = [];
            for (let item of this.errors)
                data["Errors"].push(item);
        }
        data["Data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IIResponseOfGetCitiesListByCountryIDResponse {
    ok: boolean;
    errors?: string[] | undefined;
    data?: GetCitiesListByCountryIDResponse | undefined;
}

export class GetCitiesListByCountryIDResponse implements IGetCitiesListByCountryIDResponse {
    citiesList?: GetCitiesListItem[] | undefined;

    constructor(data?: IGetCitiesListByCountryIDResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["CitiesList"])) {
                this.citiesList = [] as any;
                for (let item of _data["CitiesList"])
                    this.citiesList!.push(GetCitiesListItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetCitiesListByCountryIDResponse {
        data = typeof data === 'object' ? data : {};
        let result = new GetCitiesListByCountryIDResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.citiesList)) {
            data["CitiesList"] = [];
            for (let item of this.citiesList)
                data["CitiesList"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IGetCitiesListByCountryIDResponse {
    citiesList?: GetCitiesListItem[] | undefined;
}

export class GetCitiesListItem implements IGetCitiesListItem {
    iD?: number | undefined;
    description?: string | undefined;

    constructor(data?: IGetCitiesListItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.iD = _data["ID"];
            this.description = _data["Description"];
        }
    }

    static fromJS(data: any): GetCitiesListItem {
        data = typeof data === 'object' ? data : {};
        let result = new GetCitiesListItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ID"] = this.iD;
        data["Description"] = this.description;
        return data; 
    }
}

export interface IGetCitiesListItem {
    iD?: number | undefined;
    description?: string | undefined;
}

export class IResponseOfGetDeviceTypeListResponse implements IIResponseOfGetDeviceTypeListResponse {
    ok!: boolean;
    errors?: string[] | undefined;
    data?: GetDeviceTypeListResponse | undefined;

    constructor(data?: IIResponseOfGetDeviceTypeListResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ok = _data["Ok"];
            if (Array.isArray(_data["Errors"])) {
                this.errors = [] as any;
                for (let item of _data["Errors"])
                    this.errors!.push(item);
            }
            this.data = _data["Data"] ? GetDeviceTypeListResponse.fromJS(_data["Data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): IResponseOfGetDeviceTypeListResponse {
        data = typeof data === 'object' ? data : {};
        let result = new IResponseOfGetDeviceTypeListResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Ok"] = this.ok;
        if (Array.isArray(this.errors)) {
            data["Errors"] = [];
            for (let item of this.errors)
                data["Errors"].push(item);
        }
        data["Data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IIResponseOfGetDeviceTypeListResponse {
    ok: boolean;
    errors?: string[] | undefined;
    data?: GetDeviceTypeListResponse | undefined;
}

export class GetDeviceTypeListResponse implements IGetDeviceTypeListResponse {
    deviceTypeList?: GetDeviceTypeListItem[] | undefined;

    constructor(data?: IGetDeviceTypeListResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["DeviceTypeList"])) {
                this.deviceTypeList = [] as any;
                for (let item of _data["DeviceTypeList"])
                    this.deviceTypeList!.push(GetDeviceTypeListItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetDeviceTypeListResponse {
        data = typeof data === 'object' ? data : {};
        let result = new GetDeviceTypeListResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.deviceTypeList)) {
            data["DeviceTypeList"] = [];
            for (let item of this.deviceTypeList)
                data["DeviceTypeList"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IGetDeviceTypeListResponse {
    deviceTypeList?: GetDeviceTypeListItem[] | undefined;
}

export class GetDeviceTypeListItem implements IGetDeviceTypeListItem {
    iD?: number | undefined;
    description?: string | undefined;

    constructor(data?: IGetDeviceTypeListItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.iD = _data["ID"];
            this.description = _data["Description"];
        }
    }

    static fromJS(data: any): GetDeviceTypeListItem {
        data = typeof data === 'object' ? data : {};
        let result = new GetDeviceTypeListItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ID"] = this.iD;
        data["Description"] = this.description;
        return data; 
    }
}

export interface IGetDeviceTypeListItem {
    iD?: number | undefined;
    description?: string | undefined;
}

export class IResponseOfGetDeviceLocationInBranchListResponse implements IIResponseOfGetDeviceLocationInBranchListResponse {
    ok!: boolean;
    errors?: string[] | undefined;
    data?: GetDeviceLocationInBranchListResponse | undefined;

    constructor(data?: IIResponseOfGetDeviceLocationInBranchListResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ok = _data["Ok"];
            if (Array.isArray(_data["Errors"])) {
                this.errors = [] as any;
                for (let item of _data["Errors"])
                    this.errors!.push(item);
            }
            this.data = _data["Data"] ? GetDeviceLocationInBranchListResponse.fromJS(_data["Data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): IResponseOfGetDeviceLocationInBranchListResponse {
        data = typeof data === 'object' ? data : {};
        let result = new IResponseOfGetDeviceLocationInBranchListResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Ok"] = this.ok;
        if (Array.isArray(this.errors)) {
            data["Errors"] = [];
            for (let item of this.errors)
                data["Errors"].push(item);
        }
        data["Data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IIResponseOfGetDeviceLocationInBranchListResponse {
    ok: boolean;
    errors?: string[] | undefined;
    data?: GetDeviceLocationInBranchListResponse | undefined;
}

export class GetDeviceLocationInBranchListResponse implements IGetDeviceLocationInBranchListResponse {
    deviceLocationInBranchList?: GetDeviceLocationInBranchListItem[] | undefined;

    constructor(data?: IGetDeviceLocationInBranchListResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["DeviceLocationInBranchList"])) {
                this.deviceLocationInBranchList = [] as any;
                for (let item of _data["DeviceLocationInBranchList"])
                    this.deviceLocationInBranchList!.push(GetDeviceLocationInBranchListItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetDeviceLocationInBranchListResponse {
        data = typeof data === 'object' ? data : {};
        let result = new GetDeviceLocationInBranchListResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.deviceLocationInBranchList)) {
            data["DeviceLocationInBranchList"] = [];
            for (let item of this.deviceLocationInBranchList)
                data["DeviceLocationInBranchList"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IGetDeviceLocationInBranchListResponse {
    deviceLocationInBranchList?: GetDeviceLocationInBranchListItem[] | undefined;
}

export class GetDeviceLocationInBranchListItem implements IGetDeviceLocationInBranchListItem {
    iD?: number | undefined;
    description?: string | undefined;
    branchName?: string | undefined;
    branchID?: number | undefined;

    constructor(data?: IGetDeviceLocationInBranchListItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.iD = _data["ID"];
            this.description = _data["Description"];
            this.branchName = _data["BranchName"];
            this.branchID = _data["BranchID"];
        }
    }

    static fromJS(data: any): GetDeviceLocationInBranchListItem {
        data = typeof data === 'object' ? data : {};
        let result = new GetDeviceLocationInBranchListItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ID"] = this.iD;
        data["Description"] = this.description;
        data["BranchName"] = this.branchName;
        data["BranchID"] = this.branchID;
        return data; 
    }
}

export interface IGetDeviceLocationInBranchListItem {
    iD?: number | undefined;
    description?: string | undefined;
    branchName?: string | undefined;
    branchID?: number | undefined;
}

export class AddDeviceLocationInBranchRequest implements IAddDeviceLocationInBranchRequest {
    description?: string | undefined;
    branchID?: number | undefined;

    constructor(data?: IAddDeviceLocationInBranchRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.description = _data["Description"];
            this.branchID = _data["BranchID"];
        }
    }

    static fromJS(data: any): AddDeviceLocationInBranchRequest {
        data = typeof data === 'object' ? data : {};
        let result = new AddDeviceLocationInBranchRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Description"] = this.description;
        data["BranchID"] = this.branchID;
        return data; 
    }
}

export interface IAddDeviceLocationInBranchRequest {
    description?: string | undefined;
    branchID?: number | undefined;
}

export class IResponseOfAddDeviceLocationInBranchResponse implements IIResponseOfAddDeviceLocationInBranchResponse {
    ok!: boolean;
    errors?: string[] | undefined;
    data?: AddDeviceLocationInBranchResponse | undefined;

    constructor(data?: IIResponseOfAddDeviceLocationInBranchResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ok = _data["Ok"];
            if (Array.isArray(_data["Errors"])) {
                this.errors = [] as any;
                for (let item of _data["Errors"])
                    this.errors!.push(item);
            }
            this.data = _data["Data"] ? AddDeviceLocationInBranchResponse.fromJS(_data["Data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): IResponseOfAddDeviceLocationInBranchResponse {
        data = typeof data === 'object' ? data : {};
        let result = new IResponseOfAddDeviceLocationInBranchResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Ok"] = this.ok;
        if (Array.isArray(this.errors)) {
            data["Errors"] = [];
            for (let item of this.errors)
                data["Errors"].push(item);
        }
        data["Data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IIResponseOfAddDeviceLocationInBranchResponse {
    ok: boolean;
    errors?: string[] | undefined;
    data?: AddDeviceLocationInBranchResponse | undefined;
}

export class AddDeviceLocationInBranchResponse implements IAddDeviceLocationInBranchResponse {

    constructor(data?: IAddDeviceLocationInBranchResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): AddDeviceLocationInBranchResponse {
        data = typeof data === 'object' ? data : {};
        let result = new AddDeviceLocationInBranchResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data; 
    }
}

export interface IAddDeviceLocationInBranchResponse {
}

export class EditDeviceLocationInBranchRequest implements IEditDeviceLocationInBranchRequest {
    iD?: number | undefined;
    branchID?: number | undefined;
    description?: string | undefined;

    constructor(data?: IEditDeviceLocationInBranchRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.iD = _data["ID"];
            this.branchID = _data["BranchID"];
            this.description = _data["Description"];
        }
    }

    static fromJS(data: any): EditDeviceLocationInBranchRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EditDeviceLocationInBranchRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ID"] = this.iD;
        data["BranchID"] = this.branchID;
        data["Description"] = this.description;
        return data; 
    }
}

export interface IEditDeviceLocationInBranchRequest {
    iD?: number | undefined;
    branchID?: number | undefined;
    description?: string | undefined;
}

export class IResponseOfEditDeviceLocationInBranchResponse implements IIResponseOfEditDeviceLocationInBranchResponse {
    ok!: boolean;
    errors?: string[] | undefined;
    data?: EditDeviceLocationInBranchResponse | undefined;

    constructor(data?: IIResponseOfEditDeviceLocationInBranchResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ok = _data["Ok"];
            if (Array.isArray(_data["Errors"])) {
                this.errors = [] as any;
                for (let item of _data["Errors"])
                    this.errors!.push(item);
            }
            this.data = _data["Data"] ? EditDeviceLocationInBranchResponse.fromJS(_data["Data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): IResponseOfEditDeviceLocationInBranchResponse {
        data = typeof data === 'object' ? data : {};
        let result = new IResponseOfEditDeviceLocationInBranchResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Ok"] = this.ok;
        if (Array.isArray(this.errors)) {
            data["Errors"] = [];
            for (let item of this.errors)
                data["Errors"].push(item);
        }
        data["Data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IIResponseOfEditDeviceLocationInBranchResponse {
    ok: boolean;
    errors?: string[] | undefined;
    data?: EditDeviceLocationInBranchResponse | undefined;
}

export class EditDeviceLocationInBranchResponse implements IEditDeviceLocationInBranchResponse {

    constructor(data?: IEditDeviceLocationInBranchResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): EditDeviceLocationInBranchResponse {
        data = typeof data === 'object' ? data : {};
        let result = new EditDeviceLocationInBranchResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data; 
    }
}

export interface IEditDeviceLocationInBranchResponse {
}

export class AddForgivenessTypeRequest implements IAddForgivenessTypeRequest {
    description?: string | undefined;

    constructor(data?: IAddForgivenessTypeRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.description = _data["Description"];
        }
    }

    static fromJS(data: any): AddForgivenessTypeRequest {
        data = typeof data === 'object' ? data : {};
        let result = new AddForgivenessTypeRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Description"] = this.description;
        return data; 
    }
}

export interface IAddForgivenessTypeRequest {
    description?: string | undefined;
}

export class IResponseOfAddForgivenessTypeResponse implements IIResponseOfAddForgivenessTypeResponse {
    ok!: boolean;
    errors?: string[] | undefined;
    data?: AddForgivenessTypeResponse | undefined;

    constructor(data?: IIResponseOfAddForgivenessTypeResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ok = _data["Ok"];
            if (Array.isArray(_data["Errors"])) {
                this.errors = [] as any;
                for (let item of _data["Errors"])
                    this.errors!.push(item);
            }
            this.data = _data["Data"] ? AddForgivenessTypeResponse.fromJS(_data["Data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): IResponseOfAddForgivenessTypeResponse {
        data = typeof data === 'object' ? data : {};
        let result = new IResponseOfAddForgivenessTypeResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Ok"] = this.ok;
        if (Array.isArray(this.errors)) {
            data["Errors"] = [];
            for (let item of this.errors)
                data["Errors"].push(item);
        }
        data["Data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IIResponseOfAddForgivenessTypeResponse {
    ok: boolean;
    errors?: string[] | undefined;
    data?: AddForgivenessTypeResponse | undefined;
}

export class AddForgivenessTypeResponse implements IAddForgivenessTypeResponse {

    constructor(data?: IAddForgivenessTypeResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): AddForgivenessTypeResponse {
        data = typeof data === 'object' ? data : {};
        let result = new AddForgivenessTypeResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data; 
    }
}

export interface IAddForgivenessTypeResponse {
}

export class EditForgivenessTypeRequest implements IEditForgivenessTypeRequest {
    iD?: number | undefined;
    description?: string | undefined;

    constructor(data?: IEditForgivenessTypeRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.iD = _data["ID"];
            this.description = _data["Description"];
        }
    }

    static fromJS(data: any): EditForgivenessTypeRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EditForgivenessTypeRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ID"] = this.iD;
        data["Description"] = this.description;
        return data; 
    }
}

export interface IEditForgivenessTypeRequest {
    iD?: number | undefined;
    description?: string | undefined;
}

export class IResponseOfEditForgivenessTypeResponse implements IIResponseOfEditForgivenessTypeResponse {
    ok!: boolean;
    errors?: string[] | undefined;
    data?: EditForgivenessTypeResponse | undefined;

    constructor(data?: IIResponseOfEditForgivenessTypeResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ok = _data["Ok"];
            if (Array.isArray(_data["Errors"])) {
                this.errors = [] as any;
                for (let item of _data["Errors"])
                    this.errors!.push(item);
            }
            this.data = _data["Data"] ? EditForgivenessTypeResponse.fromJS(_data["Data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): IResponseOfEditForgivenessTypeResponse {
        data = typeof data === 'object' ? data : {};
        let result = new IResponseOfEditForgivenessTypeResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Ok"] = this.ok;
        if (Array.isArray(this.errors)) {
            data["Errors"] = [];
            for (let item of this.errors)
                data["Errors"].push(item);
        }
        data["Data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IIResponseOfEditForgivenessTypeResponse {
    ok: boolean;
    errors?: string[] | undefined;
    data?: EditForgivenessTypeResponse | undefined;
}

export class EditForgivenessTypeResponse implements IEditForgivenessTypeResponse {

    constructor(data?: IEditForgivenessTypeResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): EditForgivenessTypeResponse {
        data = typeof data === 'object' ? data : {};
        let result = new EditForgivenessTypeResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data; 
    }
}

export interface IEditForgivenessTypeResponse {
}

export class IResponseOfGetHolidayTypesListResponse implements IIResponseOfGetHolidayTypesListResponse {
    ok!: boolean;
    errors?: string[] | undefined;
    data?: GetHolidayTypesListResponse | undefined;

    constructor(data?: IIResponseOfGetHolidayTypesListResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ok = _data["Ok"];
            if (Array.isArray(_data["Errors"])) {
                this.errors = [] as any;
                for (let item of _data["Errors"])
                    this.errors!.push(item);
            }
            this.data = _data["Data"] ? GetHolidayTypesListResponse.fromJS(_data["Data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): IResponseOfGetHolidayTypesListResponse {
        data = typeof data === 'object' ? data : {};
        let result = new IResponseOfGetHolidayTypesListResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Ok"] = this.ok;
        if (Array.isArray(this.errors)) {
            data["Errors"] = [];
            for (let item of this.errors)
                data["Errors"].push(item);
        }
        data["Data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IIResponseOfGetHolidayTypesListResponse {
    ok: boolean;
    errors?: string[] | undefined;
    data?: GetHolidayTypesListResponse | undefined;
}

export class GetHolidayTypesListResponse implements IGetHolidayTypesListResponse {
    holidayTypes?: GetHolidayTypeListItem[] | undefined;

    constructor(data?: IGetHolidayTypesListResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["HolidayTypes"])) {
                this.holidayTypes = [] as any;
                for (let item of _data["HolidayTypes"])
                    this.holidayTypes!.push(GetHolidayTypeListItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetHolidayTypesListResponse {
        data = typeof data === 'object' ? data : {};
        let result = new GetHolidayTypesListResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.holidayTypes)) {
            data["HolidayTypes"] = [];
            for (let item of this.holidayTypes)
                data["HolidayTypes"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IGetHolidayTypesListResponse {
    holidayTypes?: GetHolidayTypeListItem[] | undefined;
}

export class GetHolidayTypeListItem implements IGetHolidayTypeListItem {
    iD?: number | undefined;
    description?: string | undefined;

    constructor(data?: IGetHolidayTypeListItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.iD = _data["ID"];
            this.description = _data["Description"];
        }
    }

    static fromJS(data: any): GetHolidayTypeListItem {
        data = typeof data === 'object' ? data : {};
        let result = new GetHolidayTypeListItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ID"] = this.iD;
        data["Description"] = this.description;
        return data; 
    }
}

export interface IGetHolidayTypeListItem {
    iD?: number | undefined;
    description?: string | undefined;
}

export class IResponseOfDateTime implements IIResponseOfDateTime {
    ok!: boolean;
    errors?: string[] | undefined;
    data?: Date | undefined;

    constructor(data?: IIResponseOfDateTime) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ok = _data["Ok"];
            if (Array.isArray(_data["Errors"])) {
                this.errors = [] as any;
                for (let item of _data["Errors"])
                    this.errors!.push(item);
            }
            this.data = _data["Data"] ? new Date(_data["Data"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): IResponseOfDateTime {
        data = typeof data === 'object' ? data : {};
        let result = new IResponseOfDateTime();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Ok"] = this.ok;
        if (Array.isArray(this.errors)) {
            data["Errors"] = [];
            for (let item of this.errors)
                data["Errors"].push(item);
        }
        data["Data"] = this.data ? this.data.toISOString() : <any>undefined;
        return data; 
    }
}

export interface IIResponseOfDateTime {
    ok: boolean;
    errors?: string[] | undefined;
    data?: Date | undefined;
}

export class AddDeviceRequest implements IAddDeviceRequest {
    iD?: number | undefined;
    name?: string | undefined;
    numberDevices?: number | undefined;
    iPAddress?: string | undefined;
    deviceTypeID?: number | undefined;
    branchID?: number | undefined;
    deviceLocationInBranchID?: number | undefined;
    userName?: string | undefined;
    password?: string | undefined;
    port?: string | undefined;

    constructor(data?: IAddDeviceRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.iD = _data["ID"];
            this.name = _data["Name"];
            this.numberDevices = _data["NumberDevices"];
            this.iPAddress = _data["IPAddress"];
            this.deviceTypeID = _data["DeviceTypeID"];
            this.branchID = _data["BranchID"];
            this.deviceLocationInBranchID = _data["DeviceLocationInBranchID"];
            this.userName = _data["UserName"];
            this.password = _data["Password"];
            this.port = _data["Port"];
        }
    }

    static fromJS(data: any): AddDeviceRequest {
        data = typeof data === 'object' ? data : {};
        let result = new AddDeviceRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ID"] = this.iD;
        data["Name"] = this.name;
        data["NumberDevices"] = this.numberDevices;
        data["IPAddress"] = this.iPAddress;
        data["DeviceTypeID"] = this.deviceTypeID;
        data["BranchID"] = this.branchID;
        data["DeviceLocationInBranchID"] = this.deviceLocationInBranchID;
        data["UserName"] = this.userName;
        data["Password"] = this.password;
        data["Port"] = this.port;
        return data; 
    }
}

export interface IAddDeviceRequest {
    iD?: number | undefined;
    name?: string | undefined;
    numberDevices?: number | undefined;
    iPAddress?: string | undefined;
    deviceTypeID?: number | undefined;
    branchID?: number | undefined;
    deviceLocationInBranchID?: number | undefined;
    userName?: string | undefined;
    password?: string | undefined;
    port?: string | undefined;
}

export class IResponseOfAddDeviceRequest implements IIResponseOfAddDeviceRequest {
    ok!: boolean;
    errors?: string[] | undefined;
    data?: AddDeviceRequest | undefined;

    constructor(data?: IIResponseOfAddDeviceRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ok = _data["Ok"];
            if (Array.isArray(_data["Errors"])) {
                this.errors = [] as any;
                for (let item of _data["Errors"])
                    this.errors!.push(item);
            }
            this.data = _data["Data"] ? AddDeviceRequest.fromJS(_data["Data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): IResponseOfAddDeviceRequest {
        data = typeof data === 'object' ? data : {};
        let result = new IResponseOfAddDeviceRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Ok"] = this.ok;
        if (Array.isArray(this.errors)) {
            data["Errors"] = [];
            for (let item of this.errors)
                data["Errors"].push(item);
        }
        data["Data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IIResponseOfAddDeviceRequest {
    ok: boolean;
    errors?: string[] | undefined;
    data?: AddDeviceRequest | undefined;
}

export class IResponseOfGetDeviceUserLogResponse implements IIResponseOfGetDeviceUserLogResponse {
    ok!: boolean;
    errors?: string[] | undefined;
    data?: GetDeviceUserLogResponse | undefined;

    constructor(data?: IIResponseOfGetDeviceUserLogResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ok = _data["Ok"];
            if (Array.isArray(_data["Errors"])) {
                this.errors = [] as any;
                for (let item of _data["Errors"])
                    this.errors!.push(item);
            }
            this.data = _data["Data"] ? GetDeviceUserLogResponse.fromJS(_data["Data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): IResponseOfGetDeviceUserLogResponse {
        data = typeof data === 'object' ? data : {};
        let result = new IResponseOfGetDeviceUserLogResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Ok"] = this.ok;
        if (Array.isArray(this.errors)) {
            data["Errors"] = [];
            for (let item of this.errors)
                data["Errors"].push(item);
        }
        data["Data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IIResponseOfGetDeviceUserLogResponse {
    ok: boolean;
    errors?: string[] | undefined;
    data?: GetDeviceUserLogResponse | undefined;
}

export class GetDeviceUserLogResponse implements IGetDeviceUserLogResponse {
    deviceUserLogList?: GetDeviceUserLogItem[] | undefined;

    constructor(data?: IGetDeviceUserLogResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["DeviceUserLogList"])) {
                this.deviceUserLogList = [] as any;
                for (let item of _data["DeviceUserLogList"])
                    this.deviceUserLogList!.push(GetDeviceUserLogItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetDeviceUserLogResponse {
        data = typeof data === 'object' ? data : {};
        let result = new GetDeviceUserLogResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.deviceUserLogList)) {
            data["DeviceUserLogList"] = [];
            for (let item of this.deviceUserLogList)
                data["DeviceUserLogList"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IGetDeviceUserLogResponse {
    deviceUserLogList?: GetDeviceUserLogItem[] | undefined;
}

export class GetDeviceUserLogItem implements IGetDeviceUserLogItem {
    iD?: number | undefined;
    firsName?: string | undefined;
    deviceID?: number | undefined;
    lastName?: string | undefined;
    personalNumber?: string | undefined;
    recordTime?: string | undefined;
    userIDInDevice?: number | undefined;
    machineNumber?: number | undefined;
    verifyMode?: number | undefined;
    isActive?: boolean | undefined;

    constructor(data?: IGetDeviceUserLogItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.iD = _data["ID"];
            this.firsName = _data["FirsName"];
            this.deviceID = _data["DeviceID"];
            this.lastName = _data["LastName"];
            this.personalNumber = _data["PersonalNumber"];
            this.recordTime = _data["RecordTime"];
            this.userIDInDevice = _data["UserIDInDevice"];
            this.machineNumber = _data["MachineNumber"];
            this.verifyMode = _data["VerifyMode"];
            this.isActive = _data["IsActive"];
        }
    }

    static fromJS(data: any): GetDeviceUserLogItem {
        data = typeof data === 'object' ? data : {};
        let result = new GetDeviceUserLogItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ID"] = this.iD;
        data["FirsName"] = this.firsName;
        data["DeviceID"] = this.deviceID;
        data["LastName"] = this.lastName;
        data["PersonalNumber"] = this.personalNumber;
        data["RecordTime"] = this.recordTime;
        data["UserIDInDevice"] = this.userIDInDevice;
        data["MachineNumber"] = this.machineNumber;
        data["VerifyMode"] = this.verifyMode;
        data["IsActive"] = this.isActive;
        return data; 
    }
}

export interface IGetDeviceUserLogItem {
    iD?: number | undefined;
    firsName?: string | undefined;
    deviceID?: number | undefined;
    lastName?: string | undefined;
    personalNumber?: string | undefined;
    recordTime?: string | undefined;
    userIDInDevice?: number | undefined;
    machineNumber?: number | undefined;
    verifyMode?: number | undefined;
    isActive?: boolean | undefined;
}

export class IResponseOfGetDeviceListResponse implements IIResponseOfGetDeviceListResponse {
    ok!: boolean;
    errors?: string[] | undefined;
    data?: GetDeviceListResponse | undefined;

    constructor(data?: IIResponseOfGetDeviceListResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ok = _data["Ok"];
            if (Array.isArray(_data["Errors"])) {
                this.errors = [] as any;
                for (let item of _data["Errors"])
                    this.errors!.push(item);
            }
            this.data = _data["Data"] ? GetDeviceListResponse.fromJS(_data["Data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): IResponseOfGetDeviceListResponse {
        data = typeof data === 'object' ? data : {};
        let result = new IResponseOfGetDeviceListResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Ok"] = this.ok;
        if (Array.isArray(this.errors)) {
            data["Errors"] = [];
            for (let item of this.errors)
                data["Errors"].push(item);
        }
        data["Data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IIResponseOfGetDeviceListResponse {
    ok: boolean;
    errors?: string[] | undefined;
    data?: GetDeviceListResponse | undefined;
}

export class GetDeviceListResponse implements IGetDeviceListResponse {
    deviceList?: GetDeviceListItem[] | undefined;

    constructor(data?: IGetDeviceListResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["DeviceList"])) {
                this.deviceList = [] as any;
                for (let item of _data["DeviceList"])
                    this.deviceList!.push(GetDeviceListItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetDeviceListResponse {
        data = typeof data === 'object' ? data : {};
        let result = new GetDeviceListResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.deviceList)) {
            data["DeviceList"] = [];
            for (let item of this.deviceList)
                data["DeviceList"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IGetDeviceListResponse {
    deviceList?: GetDeviceListItem[] | undefined;
}

export class GetDeviceListItem implements IGetDeviceListItem {
    iD?: number | undefined;
    iPAddress?: string | undefined;
    lastSyncDate?: Date | undefined;
    branch?: string | undefined;
    locationInBranch?: string | undefined;
    state?: number | undefined;
    name?: string | undefined;

    constructor(data?: IGetDeviceListItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.iD = _data["ID"];
            this.iPAddress = _data["IPAddress"];
            this.lastSyncDate = _data["LastSyncDate"] ? new Date(_data["LastSyncDate"].toString()) : <any>undefined;
            this.branch = _data["Branch"];
            this.locationInBranch = _data["LocationInBranch"];
            this.state = _data["State"];
            this.name = _data["Name"];
        }
    }

    static fromJS(data: any): GetDeviceListItem {
        data = typeof data === 'object' ? data : {};
        let result = new GetDeviceListItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ID"] = this.iD;
        data["IPAddress"] = this.iPAddress;
        data["LastSyncDate"] = this.lastSyncDate ? this.lastSyncDate.toISOString() : <any>undefined;
        data["Branch"] = this.branch;
        data["LocationInBranch"] = this.locationInBranch;
        data["State"] = this.state;
        data["Name"] = this.name;
        return data; 
    }
}

export interface IGetDeviceListItem {
    iD?: number | undefined;
    iPAddress?: string | undefined;
    lastSyncDate?: Date | undefined;
    branch?: string | undefined;
    locationInBranch?: string | undefined;
    state?: number | undefined;
    name?: string | undefined;
}

export class DeviceUserLog implements IDeviceUserLog {
    iD?: number | undefined;
    machineNumber?: number | undefined;
    indRegID?: number | undefined;
    dwVerifyMode?: number | undefined;
    dwInOutMode?: number | undefined;
    dateTimeRecord?: Date | undefined;
    isActive?: boolean | undefined;
    deviceID?: number | undefined;
    manualyAdd?: boolean | undefined;

    constructor(data?: IDeviceUserLog) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.iD = _data["ID"];
            this.machineNumber = _data["MachineNumber"];
            this.indRegID = _data["IndRegID"];
            this.dwVerifyMode = _data["dwVerifyMode"];
            this.dwInOutMode = _data["dwInOutMode"];
            this.dateTimeRecord = _data["DateTimeRecord"] ? new Date(_data["DateTimeRecord"].toString()) : <any>undefined;
            this.isActive = _data["IsActive"];
            this.deviceID = _data["DeviceID"];
            this.manualyAdd = _data["ManualyAdd"];
        }
    }

    static fromJS(data: any): DeviceUserLog {
        data = typeof data === 'object' ? data : {};
        let result = new DeviceUserLog();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ID"] = this.iD;
        data["MachineNumber"] = this.machineNumber;
        data["IndRegID"] = this.indRegID;
        data["dwVerifyMode"] = this.dwVerifyMode;
        data["dwInOutMode"] = this.dwInOutMode;
        data["DateTimeRecord"] = this.dateTimeRecord ? this.dateTimeRecord.toISOString() : <any>undefined;
        data["IsActive"] = this.isActive;
        data["DeviceID"] = this.deviceID;
        data["ManualyAdd"] = this.manualyAdd;
        return data; 
    }
}

export interface IDeviceUserLog {
    iD?: number | undefined;
    machineNumber?: number | undefined;
    indRegID?: number | undefined;
    dwVerifyMode?: number | undefined;
    dwInOutMode?: number | undefined;
    dateTimeRecord?: Date | undefined;
    isActive?: boolean | undefined;
    deviceID?: number | undefined;
    manualyAdd?: boolean | undefined;
}

export class IResponseOfGetDeviceUserLogItemForEdit implements IIResponseOfGetDeviceUserLogItemForEdit {
    ok!: boolean;
    errors?: string[] | undefined;
    data?: GetDeviceUserLogItemForEdit | undefined;

    constructor(data?: IIResponseOfGetDeviceUserLogItemForEdit) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ok = _data["Ok"];
            if (Array.isArray(_data["Errors"])) {
                this.errors = [] as any;
                for (let item of _data["Errors"])
                    this.errors!.push(item);
            }
            this.data = _data["Data"] ? GetDeviceUserLogItemForEdit.fromJS(_data["Data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): IResponseOfGetDeviceUserLogItemForEdit {
        data = typeof data === 'object' ? data : {};
        let result = new IResponseOfGetDeviceUserLogItemForEdit();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Ok"] = this.ok;
        if (Array.isArray(this.errors)) {
            data["Errors"] = [];
            for (let item of this.errors)
                data["Errors"].push(item);
        }
        data["Data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IIResponseOfGetDeviceUserLogItemForEdit {
    ok: boolean;
    errors?: string[] | undefined;
    data?: GetDeviceUserLogItemForEdit | undefined;
}

export class GetDeviceUserLogItemForEdit implements IGetDeviceUserLogItemForEdit {
    iD?: number | undefined;
    machineNumber?: number | undefined;
    indRegID?: number | undefined;
    dwVerifyMode?: number | undefined;
    dwInOutMode?: number | undefined;
    dateTimeRecord?: Date | undefined;
    isActive?: boolean | undefined;
    deviceID?: number | undefined;
    manualyAdd?: boolean | undefined;

    constructor(data?: IGetDeviceUserLogItemForEdit) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.iD = _data["ID"];
            this.machineNumber = _data["MachineNumber"];
            this.indRegID = _data["IndRegID"];
            this.dwVerifyMode = _data["dwVerifyMode"];
            this.dwInOutMode = _data["dwInOutMode"];
            this.dateTimeRecord = _data["DateTimeRecord"] ? new Date(_data["DateTimeRecord"].toString()) : <any>undefined;
            this.isActive = _data["IsActive"];
            this.deviceID = _data["DeviceID"];
            this.manualyAdd = _data["ManualyAdd"];
        }
    }

    static fromJS(data: any): GetDeviceUserLogItemForEdit {
        data = typeof data === 'object' ? data : {};
        let result = new GetDeviceUserLogItemForEdit();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ID"] = this.iD;
        data["MachineNumber"] = this.machineNumber;
        data["IndRegID"] = this.indRegID;
        data["dwVerifyMode"] = this.dwVerifyMode;
        data["dwInOutMode"] = this.dwInOutMode;
        data["DateTimeRecord"] = this.dateTimeRecord ? this.dateTimeRecord.toISOString() : <any>undefined;
        data["IsActive"] = this.isActive;
        data["DeviceID"] = this.deviceID;
        data["ManualyAdd"] = this.manualyAdd;
        return data; 
    }
}

export interface IGetDeviceUserLogItemForEdit {
    iD?: number | undefined;
    machineNumber?: number | undefined;
    indRegID?: number | undefined;
    dwVerifyMode?: number | undefined;
    dwInOutMode?: number | undefined;
    dateTimeRecord?: Date | undefined;
    isActive?: boolean | undefined;
    deviceID?: number | undefined;
    manualyAdd?: boolean | undefined;
}

export class DeviceUserListRequest implements IDeviceUserListRequest {
    isRegistrated?: boolean | undefined;

    constructor(data?: IDeviceUserListRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isRegistrated = _data["IsRegistrated"];
        }
    }

    static fromJS(data: any): DeviceUserListRequest {
        data = typeof data === 'object' ? data : {};
        let result = new DeviceUserListRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["IsRegistrated"] = this.isRegistrated;
        return data; 
    }
}

export interface IDeviceUserListRequest {
    isRegistrated?: boolean | undefined;
}

export class IResponseOfDeviceUserListResponse implements IIResponseOfDeviceUserListResponse {
    ok!: boolean;
    errors?: string[] | undefined;
    data?: DeviceUserListResponse | undefined;

    constructor(data?: IIResponseOfDeviceUserListResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ok = _data["Ok"];
            if (Array.isArray(_data["Errors"])) {
                this.errors = [] as any;
                for (let item of _data["Errors"])
                    this.errors!.push(item);
            }
            this.data = _data["Data"] ? DeviceUserListResponse.fromJS(_data["Data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): IResponseOfDeviceUserListResponse {
        data = typeof data === 'object' ? data : {};
        let result = new IResponseOfDeviceUserListResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Ok"] = this.ok;
        if (Array.isArray(this.errors)) {
            data["Errors"] = [];
            for (let item of this.errors)
                data["Errors"].push(item);
        }
        data["Data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IIResponseOfDeviceUserListResponse {
    ok: boolean;
    errors?: string[] | undefined;
    data?: DeviceUserListResponse | undefined;
}

export class DeviceUserListResponse implements IDeviceUserListResponse {
    deviceUserListItems?: DeviceUserListItem[] | undefined;

    constructor(data?: IDeviceUserListResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["deviceUserListItems"])) {
                this.deviceUserListItems = [] as any;
                for (let item of _data["deviceUserListItems"])
                    this.deviceUserListItems!.push(DeviceUserListItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DeviceUserListResponse {
        data = typeof data === 'object' ? data : {};
        let result = new DeviceUserListResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.deviceUserListItems)) {
            data["deviceUserListItems"] = [];
            for (let item of this.deviceUserListItems)
                data["deviceUserListItems"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IDeviceUserListResponse {
    deviceUserListItems?: DeviceUserListItem[] | undefined;
}

export class DeviceUserListItem implements IDeviceUserListItem {
    iD?: number | undefined;
    userDeviceID?: number | undefined;
    machineNumber?: number | undefined;
    name?: string | undefined;
    fingerIndex?: number | undefined;
    tmpData?: string | undefined;
    privelage?: number | undefined;
    password?: string | undefined;
    enabled?: boolean | undefined;
    iFlag?: string | undefined;
    isRegistratedSystem?: boolean | undefined;

    constructor(data?: IDeviceUserListItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.iD = _data["ID"];
            this.userDeviceID = _data["UserDeviceID"];
            this.machineNumber = _data["MachineNumber"];
            this.name = _data["Name"];
            this.fingerIndex = _data["FingerIndex"];
            this.tmpData = _data["TmpData"];
            this.privelage = _data["Privelage"];
            this.password = _data["Password"];
            this.enabled = _data["Enabled"];
            this.iFlag = _data["iFlag"];
            this.isRegistratedSystem = _data["IsRegistratedSystem"];
        }
    }

    static fromJS(data: any): DeviceUserListItem {
        data = typeof data === 'object' ? data : {};
        let result = new DeviceUserListItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ID"] = this.iD;
        data["UserDeviceID"] = this.userDeviceID;
        data["MachineNumber"] = this.machineNumber;
        data["Name"] = this.name;
        data["FingerIndex"] = this.fingerIndex;
        data["TmpData"] = this.tmpData;
        data["Privelage"] = this.privelage;
        data["Password"] = this.password;
        data["Enabled"] = this.enabled;
        data["iFlag"] = this.iFlag;
        data["IsRegistratedSystem"] = this.isRegistratedSystem;
        return data; 
    }
}

export interface IDeviceUserListItem {
    iD?: number | undefined;
    userDeviceID?: number | undefined;
    machineNumber?: number | undefined;
    name?: string | undefined;
    fingerIndex?: number | undefined;
    tmpData?: string | undefined;
    privelage?: number | undefined;
    password?: string | undefined;
    enabled?: boolean | undefined;
    iFlag?: string | undefined;
    isRegistratedSystem?: boolean | undefined;
}

export class IZKEM implements IIZKEM {

    constructor(data?: IIZKEM) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IZKEM {
        data = typeof data === 'object' ? data : {};
        let result = new IZKEM();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data; 
    }
}

export interface IIZKEM {
}

export class UserInfo implements IUserInfo {
    machineNumber?: number | undefined;
    enrollNumber?: string | undefined;
    name?: string | undefined;
    fingerIndex?: number | undefined;
    tmpData?: string | undefined;
    privelage?: number | undefined;
    password?: string | undefined;
    enabled?: boolean | undefined;
    iFlag?: string | undefined;

    constructor(data?: IUserInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.machineNumber = _data["MachineNumber"];
            this.enrollNumber = _data["EnrollNumber"];
            this.name = _data["Name"];
            this.fingerIndex = _data["FingerIndex"];
            this.tmpData = _data["TmpData"];
            this.privelage = _data["Privelage"];
            this.password = _data["Password"];
            this.enabled = _data["Enabled"];
            this.iFlag = _data["iFlag"];
        }
    }

    static fromJS(data: any): UserInfo {
        data = typeof data === 'object' ? data : {};
        let result = new UserInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["MachineNumber"] = this.machineNumber;
        data["EnrollNumber"] = this.enrollNumber;
        data["Name"] = this.name;
        data["FingerIndex"] = this.fingerIndex;
        data["TmpData"] = this.tmpData;
        data["Privelage"] = this.privelage;
        data["Password"] = this.password;
        data["Enabled"] = this.enabled;
        data["iFlag"] = this.iFlag;
        return data; 
    }
}

export interface IUserInfo {
    machineNumber?: number | undefined;
    enrollNumber?: string | undefined;
    name?: string | undefined;
    fingerIndex?: number | undefined;
    tmpData?: string | undefined;
    privelage?: number | undefined;
    password?: string | undefined;
    enabled?: boolean | undefined;
    iFlag?: string | undefined;
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new ApiException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((<any>event.target).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}

}